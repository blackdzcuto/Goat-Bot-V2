var ⵒⴵⵇⴺ = ⵒⴵⵇⴺ || {};
ⵒⴵⵇⴺ.scope = {};
ⵒⴵⵇⴺ.createTemplateTagFirstArg = function (ⵒⵅⴼⴺ) {
  return ⵒⵅⴼⴺ.raw = ⵒⵅⴼⴺ;
};
ⵒⴵⵇⴺ.createTemplateTagFirstArgWithRaw = function (ⵂⴰⵀⴺ, ⵂⵀⴵⴺ) {
  ⵂⴰⵀⴺ.raw = ⵂⵀⴵⴺ;
  return ⵂⴰⵀⴺ;
};
ⵒⴵⵇⴺ.arrayIteratorImpl = function (ⴲⵛⴸⴺ) {
  var ⵒⴵⴷⴻ = 0;
  return function () {
    if (ⵒⴵⴷⴻ < ⴲⵛⴸⴺ.length) {
      return {
        done: false,
        value: ⴲⵛⴸⴺ[ⵒⴵⴷⴻ++]
      };
    } else {
      return {
        done: true
      };
    }
  };
};
ⵒⴵⵇⴺ.arrayIterator = function (ⵂⵐⴺⴻ) {
  return {
    next: ⵒⴵⵇⴺ.arrayIteratorImpl(ⵂⵐⴺⴻ)
  };
};
ⵒⴵⵇⴺ.makeIterator = function (ⵂⴰⴰⴻ) {
  var ⴲⵋⴳⴻ = typeof Symbol != "undefined" && Symbol.iterator && ⵂⴰⴰⴻ[Symbol.iterator];
  var ⴲⵛⵘⴺ = 10;
  while (ⴲⵛⵘⴺ < 32) {
    switch (ⴲⵛⵘⴺ) {
      case 10:
        ⴲⵛⵘⴺ = ⴲⵋⴳⴻ ? 15 : 32;
        break;
      case 15:
        ⴲⵛⵘⴺ = 32;
        return ⴲⵋⴳⴻ.call(ⵂⴰⴰⴻ);
    }
  }
  var ⵒⵅⵜⴺ = 28;
  while (ⵒⵅⵜⴺ < 39) {
    switch (ⵒⵅⵜⴺ) {
      case 21:
        ⵒⵅⵜⴺ = 39;
        return ⵒⴵⵇⴺ.arrayIterator(ⵂⴰⴰⴻ);
      case 28:
        ⵒⵅⵜⴺ = typeof ⵂⴰⴰⴻ.length == "number" ? 21 : 39;
        break;
    }
  }
  throw Error(String(ⵂⴰⴰⴻ) + " is not an iterable or ArrayLike");
};
ⵒⴵⵇⴺ.arrayFromIterator = function (ⵒⵕⵑⴺ) {
  var ⵂⵀⵕⴺ = 15;
  while (ⵂⵀⵕⴺ < 35) {
    switch (ⵂⵀⵕⴺ) {
      case 15:
        ⵂⵀⵕⴺ = 31;
        var ⴲⵋⵓⴻ;
        var ⵒⴵⵗⴻ = [];
        break;
      case 7:
        ⵂⵀⵕⴺ = 31;
        ⵒⴵⵗⴻ.push(ⴲⵋⵓⴻ.value);
        break;
      case 31:
        ⵂⵀⵕⴺ = !(ⴲⵋⵓⴻ = ⵒⵕⵑⴺ.next()).done ? 7 : 35;
        break;
    }
  }
  return ⵒⴵⵗⴻ;
};
ⵒⴵⵇⴺ.arrayFromIterable = function (ⵒⵅⵌⴻ) {
  if (ⵒⵅⵌⴻ instanceof Array) {
    return ⵒⵅⵌⴻ;
  } else {
    return ⵒⴵⵇⴺ.arrayFromIterator(ⵒⴵⵇⴺ.makeIterator(ⵒⵅⵌⴻ));
  }
};
ⵒⴵⵇⴺ.owns = function (ⵂⴰⵐⴻ, ⵂⵀⵅⴻ) {
  return Object.prototype.hasOwnProperty.call(ⵂⴰⵐⴻ, ⵂⵀⵅⴻ);
};
ⵒⴵⵇⴺ.ASSUME_ES5 = false;
ⵒⴵⵇⴺ.ASSUME_NO_NATIVE_MAP = false;
ⵒⴵⵇⴺ.ASSUME_NO_NATIVE_SET = false;
ⵒⴵⵇⴺ.SIMPLE_FROUND_POLYFILL = false;
ⵒⴵⵇⴺ.ISOLATE_POLYFILLS = false;
ⵒⴵⵇⴺ.FORCE_POLYFILL_PROMISE = false;
ⵒⴵⵇⴺ.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = false;
ⵒⴵⵇⴺ.defineProperty = ⵒⴵⵇⴺ.ASSUME_ES5 || typeof Object.defineProperties == "function" ? Object.defineProperty : function (ⴲⵛⵈⴻ, ⴲⴻⴾⴻ, ⵒⵕⵁⴻ) {
  var ⵒⵅⵌⴷ = 31;
  while (ⵒⵅⵌⴷ < 35) {
    switch (ⵒⵅⵌⴷ) {
      case 7:
        ⵒⵅⵌⴷ = 35;
        return ⴲⵛⵈⴻ;
      case 31:
        ⵒⵅⵌⴷ = ⴲⵛⵈⴻ == Array.prototype || ⴲⵛⵈⴻ == Object.prototype ? 7 : 35;
        break;
    }
  }
  ⴲⵛⵈⴻ[ⴲⴻⴾⴻ] = ⵒⵕⵁⴻ.value;
  return ⴲⵛⵈⴻ;
};
ⵒⴵⵇⴺ.getGlobal = function (ⵂⴰⵐⴷ) {
  ⵂⴰⵐⴷ = [typeof globalThis == "object" && globalThis, ⵂⴰⵐⴷ, typeof window == "object" && window, typeof self == "object" && self, typeof global == "object" && global];
  var ⵂⵀⵅⴷ = 15;
  while (ⵂⵀⵅⴷ < 35) {
    switch (ⵂⵀⵅⴷ) {
      case 15:
        ⵂⵀⵅⴷ = 31;
        var ⴲⵛⵈⴷ = 0;
        break;
      case 30:
        ⵂⵀⵅⴷ = 31;
        ++ⴲⵛⵈⴷ;
        break;
      case 31:
        ⵂⵀⵅⴷ = ⴲⵛⵈⴷ < ⵂⴰⵐⴷ.length ? 7 : 35;
        break;
      case 7:
        ⵂⵀⵅⴷ = 30;
        {
          var ⴲⴻⴾⴷ = ⵂⴰⵐⴷ[ⴲⵛⵈⴷ];
          var ⵒⵕⵁⴷ = 27;
          while (ⵒⵕⵁⴷ < 36) {
            switch (ⵒⵕⵁⴷ) {
              case 27:
                ⵒⵕⵁⴷ = ⴲⴻⴾⴷ && ⴲⴻⴾⴷ.Math == Math ? 24 : 36;
                break;
              case 24:
                ⵒⵕⵁⴷ = 36;
                return ⴲⴻⴾⴷ;
            }
          }
        }
        break;
    }
  }
  throw Error("Cannot find global object");
};
ⵒⴵⵇⴺ.global = ⵒⴵⵇⴺ.getGlobal(this);
ⵒⴵⵇⴺ.IS_SYMBOL_NATIVE = typeof Symbol === "function" && typeof Symbol("x") === "symbol";
ⵒⴵⵇⴺ.TRUST_ES6_POLYFILLS = !ⵒⴵⵇⴺ.ISOLATE_POLYFILLS || ⵒⴵⵇⴺ.IS_SYMBOL_NATIVE;
ⵒⴵⵇⴺ.polyfills = {};
ⵒⴵⵇⴺ.propertyToPolyfillSymbol = {};
ⵒⴵⵇⴺ.POLYFILL_PREFIX = "$jscp$";
function ⵒⴵⴷⴷ(ⵂⵐⴺⴷ, ⴲⵛⴸⴸ, ⵒⵅⴼⴸ) {
  var ⵒⵕⴱⴸ = 24;
  while (ⵒⵕⴱⴸ < 36) {
    switch (ⵒⵕⴱⴸ) {
      case 14:
        ⵒⵕⴱⴸ = 36;
        {
          ⵒⵅⴼⴸ = ⵒⴵⵇⴺ.propertyToPolyfillSymbol[ⴲⵛⴸⴸ];
          var ⵂⵀⴵⴸ = 31;
          while (ⵂⵀⴵⴸ < 35) {
            switch (ⵂⵀⴵⴸ) {
              case 31:
                ⵂⵀⴵⴸ = ⵒⵅⴼⴸ == null ? 7 : 35;
                break;
              case 7:
                ⵂⵀⴵⴸ = 35;
                return ⵂⵐⴺⴷ[ⴲⵛⴸⴸ];
            }
          }
          ⵒⵅⴼⴸ = ⵂⵐⴺⴷ[ⵒⵅⴼⴸ];
          if (ⵒⵅⴼⴸ !== undefined) {
            return ⵒⵅⴼⴸ;
          } else {
            return ⵂⵐⴺⴷ[ⴲⵛⴸⴸ];
          }
        }
        break;
      case 24:
        ⵒⵕⴱⴸ = !ⵒⵅⴼⴸ || ⵂⵐⴺⴷ != null ? 14 : 36;
        break;
    }
  }
}
ⵒⴵⵇⴺ.polyfill = function (ⵂⵐⵚⴷ, ⴲⴻⵞⴷ, ⴲⵋⵓⴷ, ⵒⴵⵗⴷ) {
  if (ⴲⴻⵞⴷ) {
    if (ⵒⴵⵇⴺ.ISOLATE_POLYFILLS) {
      ⵒⴵⵇⴺ.polyfillIsolated(ⵂⵐⵚⴷ, ⴲⴻⵞⴷ, ⴲⵋⵓⴷ, ⵒⴵⵗⴷ);
    } else {
      ⵒⴵⵇⴺ.polyfillUnisolated(ⵂⵐⵚⴷ, ⴲⴻⵞⴷ, ⴲⵋⵓⴷ, ⵒⴵⵗⴷ);
    }
  }
};
ⵒⴵⵇⴺ.polyfillUnisolated = function (ⵂⵀⵕⴸ, ⴲⵛⵘⴸ, ⴲⴻⵎⴸ, ⵒⵕⵑⴸ) {
  ⴲⴻⵎⴸ = ⵒⴵⵇⴺ.global;
  ⵂⵀⵕⴸ = ⵂⵀⵕⴸ.split(".");
  var ⵒⴵⵇⴸ = 36;
  while (ⵒⴵⵇⴸ < 37) {
    switch (ⵒⴵⵇⴸ) {
      case 36:
        ⵒⴵⵇⴸ = 29;
        ⵒⵕⵑⴸ = 0;
        break;
      case 16:
        ⵒⴵⵇⴸ = 12;
        {
          var ⵂⵐⵊⴸ = ⵂⵀⵕⴸ[ⵒⵕⵑⴸ];
          var ⵂⴰⵀⴸ = 10;
          while (ⵂⴰⵀⴸ < 32) {
            switch (ⵂⴰⵀⴸ) {
              case 15:
                ⵂⴰⵀⴸ = 32;
                return;
              case 10:
                ⵂⴰⵀⴸ = !(ⵂⵐⵊⴸ in ⴲⴻⵎⴸ) ? 15 : 32;
                break;
            }
          }
          ⴲⴻⵎⴸ = ⴲⴻⵎⴸ[ⵂⵐⵊⴸ];
        }
        break;
      case 29:
        ⵒⴵⵇⴸ = ⵒⵕⵑⴸ < ⵂⵀⵕⴸ.length - 1 ? 16 : 37;
        break;
      case 12:
        ⵒⴵⵇⴸ = 29;
        ⵒⵕⵑⴸ++;
        break;
    }
  }
  ⵂⵀⵕⴸ = ⵂⵀⵕⴸ[ⵂⵀⵕⴸ.length - 1];
  ⵒⵕⵑⴸ = ⴲⴻⵎⴸ[ⵂⵀⵕⴸ];
  ⴲⵛⵘⴸ = ⴲⵛⵘⴸ(ⵒⵕⵑⴸ);
  if (ⴲⵛⵘⴸ != ⵒⵕⵑⴸ && ⴲⵛⵘⴸ != null) {
    ⵒⴵⵇⴺ.defineProperty(ⴲⴻⵎⴸ, ⵂⵀⵕⴸ, {
      configurable: true,
      writable: true,
      value: ⴲⵛⵘⴸ
    });
  }
};
ⵒⴵⵇⴺ.polyfillIsolated = function (ⴲⵋⵃⴸ, ⵒⵕⵁⴹ, ⵂⵀⵅⴹ, ⵂⵐⴺⴹ) {
  var ⴲⴻⴾⴹ = ⴲⵋⵃⴸ.split(".");
  ⴲⵋⵃⴸ = ⴲⴻⴾⴹ.length === 1;
  ⵂⵐⴺⴹ = ⴲⴻⴾⴹ[0];
  ⵂⵐⴺⴹ = !ⴲⵋⵃⴸ && ⵂⵐⴺⴹ in ⵒⴵⵇⴺ.polyfills ? ⵒⴵⵇⴺ.polyfills : ⵒⴵⵇⴺ.global;
  var ⴲⵋⴳⴹ = 26;
  while (ⴲⵋⴳⴹ < 39) {
    switch (ⴲⵋⴳⴹ) {
      case 26:
        ⴲⵋⴳⴹ = 38;
        var ⵒⴵⴷⴹ = 0;
        break;
      case 32:
        ⴲⵋⴳⴹ = 18;
        {
          var ⵒⵅⵜⴸ = ⴲⴻⴾⴹ[ⵒⴵⴷⴹ];
          var ⵂⴰⴰⴹ = 38;
          while (ⵂⴰⴰⴹ < 39) {
            switch (ⵂⴰⴰⴹ) {
              case 32:
                ⵂⴰⴰⴹ = 39;
                return;
              case 38:
                ⵂⴰⴰⴹ = !(ⵒⵅⵜⴸ in ⵂⵐⴺⴹ) ? 32 : 39;
                break;
            }
          }
          ⵂⵐⴺⴹ = ⵂⵐⴺⴹ[ⵒⵅⵜⴸ];
        }
        break;
      case 38:
        ⴲⵋⴳⴹ = ⵒⴵⴷⴹ < ⴲⴻⴾⴹ.length - 1 ? 32 : 39;
        break;
      case 18:
        ⴲⵋⴳⴹ = 38;
        ⵒⴵⴷⴹ++;
        break;
    }
  }
  ⴲⴻⴾⴹ = ⴲⴻⴾⴹ[ⴲⴻⴾⴹ.length - 1];
  ⵂⵀⵅⴹ = ⵒⴵⵇⴺ.IS_SYMBOL_NATIVE && ⵂⵀⵅⴹ === "es6" ? ⵂⵐⴺⴹ[ⴲⴻⴾⴹ] : null;
  ⵒⵕⵁⴹ = ⵒⵕⵁⴹ(ⵂⵀⵅⴹ);
  if (ⵒⵕⵁⴹ != null) {
    if (ⴲⵋⵃⴸ) {
      ⵒⴵⵇⴺ.defineProperty(ⵒⴵⵇⴺ.polyfills, ⴲⴻⴾⴹ, {
        configurable: true,
        writable: true,
        value: ⵒⵕⵁⴹ
      });
    } else if (ⵒⵕⵁⴹ !== ⵂⵀⵅⴹ) {
      if (ⵒⴵⵇⴺ.propertyToPolyfillSymbol[ⴲⴻⴾⴹ] === undefined) {
        ⵂⵀⵅⴹ = Math.random() * 1000000000 >>> 0;
        ⵒⴵⵇⴺ.propertyToPolyfillSymbol[ⴲⴻⴾⴹ] = ⵒⴵⵇⴺ.IS_SYMBOL_NATIVE ? ⵒⴵⵇⴺ.global.Symbol(ⴲⴻⴾⴹ) : ⵒⴵⵇⴺ.POLYFILL_PREFIX + ⵂⵀⵅⴹ + "$" + ⴲⴻⴾⴹ;
      }
      ⵒⴵⵇⴺ.defineProperty(ⵂⵐⴺⴹ, ⵒⴵⵇⴺ.propertyToPolyfillSymbol[ⴲⴻⴾⴹ], {
        configurable: true,
        writable: true,
        value: ⵒⵕⵁⴹ
      });
    }
  }
};
ⵒⴵⵇⴺ.assign = ⵒⴵⵇⴺ.TRUST_ES6_POLYFILLS && typeof Object.assign == "function" ? Object.assign : function (ⵂⵐⴺⴵ, ⴲⴻⴾⴵ) {
  var ⴲⵋⴳⴵ = 12;
  while (ⴲⵋⴳⴵ < 36) {
    switch (ⴲⵋⴳⴵ) {
      case 14:
        ⴲⵋⴳⴵ = 27;
        ⵂⵀⵕⴴ++;
        break;
      case 24:
        ⴲⵋⴳⴵ = 14;
        {
          var ⵒⴵⴷⴵ = arguments[ⵂⵀⵕⴴ];
          var ⵒⵅⵜⴴ = 12;
          while (ⵒⵅⵜⴴ < 28) {
            switch (ⵒⵅⵜⴴ) {
              case 27:
                ⵒⵅⵜⴴ = 28;
                for (var ⵂⴰⴰⴵ in ⵒⴵⴷⴵ) {
                  if (ⵒⴵⵇⴺ.owns(ⵒⴵⴷⴵ, ⵂⴰⴰⴵ)) {
                    ⵂⵐⴺⴵ[ⵂⴰⴰⴵ] = ⵒⴵⴷⴵ[ⵂⴰⴰⴵ];
                  }
                }
                break;
              case 12:
                ⵒⵅⵜⴴ = ⵒⴵⴷⴵ ? 27 : 28;
                break;
            }
          }
        }
        break;
      case 12:
        ⴲⵋⴳⴵ = 27;
        var ⵂⵀⵕⴴ = 1;
        break;
      case 27:
        ⴲⵋⴳⴵ = ⵂⵀⵕⴴ < arguments.length ? 24 : 36;
        break;
    }
  }
  return ⵂⵐⴺⴵ;
};
ⵒⴵⵇⴺ.polyfill("Object.assign", function (ⴲⵛⵘⴴ) {
  return ⴲⵛⵘⴴ || ⵒⴵⵇⴺ.assign;
}, "es6", "es3");
ⵒⴵⵇⴺ.underscoreProtoCanBeSet = function () {
  var ⵒⴵⵗⴵ = {
    a: true
  };
  var ⵂⵐⵚⴵ = {};
  try {
    ⵂⵐⵚⴵ.__proto__ = ⵒⴵⵗⴵ;
    return ⵂⵐⵚⴵ.a;
  } catch (ⵂⴰⵐⴵ) {}
  return false;
};
ⵒⴵⵇⴺ.setPrototypeOf = ⵒⴵⵇⴺ.TRUST_ES6_POLYFILLS && typeof Object.setPrototypeOf == "function" ? Object.setPrototypeOf : ⵒⴵⵇⴺ.underscoreProtoCanBeSet() ? function (ⴲⵋⵓⴵ, ⴲⵛⵈⴵ) {
  ⴲⵋⵓⴵ.__proto__ = ⴲⵛⵈⴵ;
  var ⵒⵅⵌⴵ = 7;
  while (ⵒⵅⵌⴵ < 35) {
    switch (ⵒⵅⵌⴵ) {
      case 30:
        ⵒⵅⵌⴵ = 35;
        throw new TypeError(ⴲⵋⵓⴵ + " is not extensible");
      case 7:
        ⵒⵅⵌⴵ = ⴲⵋⵓⴵ.__proto__ !== ⴲⵛⵈⴵ ? 30 : 35;
        break;
    }
  }
  return ⴲⵋⵓⴵ;
} : null;
ⵒⴵⵇⴺ.generator = {};
ⵒⴵⵇⴺ.generator.ensureIteratorResultIsObject_ = function (ⵒⵕⵁⴵ) {
  var ⵂⵀⵅⴵ = 34;
  while (ⵂⵀⵅⴵ < 35) {
    switch (ⵂⵀⵅⴵ) {
      case 23:
        ⵂⵀⵅⴵ = 35;
        throw new TypeError("Iterator result " + ⵒⵕⵁⴵ + " is not an object");
      case 34:
        ⵂⵀⵅⴵ = !(ⵒⵕⵁⴵ instanceof Object) ? 23 : 35;
        break;
    }
  }
};
ⵒⴵⵇⴺ.generator.Context = function () {
  this.isRunning_ = false;
  this.yieldAllIterator_ = null;
  this.yieldResult = undefined;
  this.nextAddress = 1;
  this.finallyAddress_ = this.catchAddress_ = 0;
  this.finallyContexts_ = this.abruptCompletion_ = null;
};
ⵒⴵⵇⴺ.generator.Context.prototype.start_ = function () {
  var ⴲⵋⵃⴶ = 8;
  while (ⴲⵋⵃⴶ < 37) {
    switch (ⴲⵋⵃⴶ) {
      case 8:
        ⴲⵋⵃⴶ = this.isRunning_ ? 36 : 37;
        break;
      case 36:
        ⴲⵋⵃⴶ = 37;
        throw new TypeError("Generator is already running");
    }
  }
  this.isRunning_ = true;
};
ⵒⴵⵇⴺ.generator.Context.prototype.stop_ = function () {
  this.isRunning_ = false;
};
ⵒⴵⵇⴺ.generator.Context.prototype.jumpToErrorHandler_ = function () {
  this.nextAddress = this.catchAddress_ || this.finallyAddress_;
};
ⵒⴵⵇⴺ.generator.Context.prototype.next_ = function (ⵒⴵⵇⴶ) {
  this.yieldResult = ⵒⴵⵇⴶ;
};
ⵒⴵⵇⴺ.generator.Context.prototype.throw_ = function (ⵒⵅⴼⴶ) {
  this.abruptCompletion_ = {
    exception: ⵒⵅⴼⴶ,
    isException: true
  };
  this.jumpToErrorHandler_();
};
ⵒⴵⵇⴺ.generator.Context.prototype.return = function (ⵂⴰⵀⴶ) {
  this.abruptCompletion_ = {
    return: ⵂⴰⵀⴶ
  };
  this.nextAddress = this.finallyAddress_;
};
ⵒⴵⵇⴺ.generator.Context.prototype.jumpThroughFinallyBlocks = function (ⵂⵀⴵⴶ) {
  this.abruptCompletion_ = {
    jumpTo: ⵂⵀⴵⴶ
  };
  this.nextAddress = this.finallyAddress_;
};
ⵒⴵⵇⴺ.generator.Context.prototype.yield = function (ⴲⵛⴸⴶ, ⴲⴻⵞⴵ) {
  this.nextAddress = ⴲⴻⵞⴵ;
  return {
    value: ⴲⵛⴸⴶ
  };
};
ⵒⴵⵇⴺ.generator.Context.prototype.yieldAll = function (ⵒⵕⴱⴶ, ⵂⴰⴰⴷ) {
  var ⴲⵋⴳⴷ = ⵒⴵⵇⴺ.makeIterator(ⵒⵕⴱⴶ);
  var ⴲⵛⵘⴶ = ⴲⵋⴳⴷ.next();
  ⵒⴵⵇⴺ.generator.ensureIteratorResultIsObject_(ⴲⵛⵘⴶ);
  var ⵒⵅⵜⴶ = 24;
  while (ⵒⵅⵜⴶ < 36) {
    switch (ⵒⵅⵜⴶ) {
      case 35:
        ⵒⵅⵜⴶ = 36;
        this.yieldAllIterator_ = ⴲⵋⴳⴷ;
        return this.yield(ⴲⵛⵘⴶ.value, ⵂⴰⴰⴷ);
      case 14:
        ⵒⵅⵜⴶ = 36;
        this.yieldResult = ⴲⵛⵘⴶ.value;
        this.nextAddress = ⵂⴰⴰⴷ;
        break;
      case 24:
        ⵒⵅⵜⴶ = ⴲⵛⵘⴶ.done ? 14 : 35;
        break;
    }
  }
};
ⵒⴵⵇⴺ.generator.Context.prototype.jumpTo = function (ⵒⵕⵑⴶ) {
  this.nextAddress = ⵒⵕⵑⴶ;
};
ⵒⴵⵇⴺ.generator.Context.prototype.jumpToEnd = function () {
  this.nextAddress = 0;
};
ⵒⴵⵇⴺ.generator.Context.prototype.setCatchFinallyBlocks = function (ⵂⵀⵕⴶ, ⵂⵐⵊⴶ) {
  this.catchAddress_ = ⵂⵀⵕⴶ;
  if (ⵂⵐⵊⴶ != undefined) {
    this.finallyAddress_ = ⵂⵐⵊⴶ;
  }
};
ⵒⴵⵇⴺ.generator.Context.prototype.setFinallyBlock = function (ⴲⴻⵎⴶ) {
  this.catchAddress_ = 0;
  this.finallyAddress_ = ⴲⴻⵎⴶ || 0;
};
ⵒⴵⵇⴺ.generator.Context.prototype.leaveTryBlock = function (ⴲⵛⵘⴲ, ⵒⵅⵜⴲ) {
  this.nextAddress = ⴲⵛⵘⴲ;
  this.catchAddress_ = ⵒⵅⵜⴲ || 0;
};
ⵒⴵⵇⴺ.generator.Context.prototype.enterCatchBlock = function (ⵒⵕⵑⴲ) {
  this.catchAddress_ = ⵒⵕⵑⴲ || 0;
  ⵒⵕⵑⴲ = this.abruptCompletion_.exception;
  this.abruptCompletion_ = null;
  return ⵒⵕⵑⴲ;
};
ⵒⴵⵇⴺ.generator.Context.prototype.enterFinallyBlock = function (ⵂⵀⵕⴲ, ⵂⵐⵊⴲ, ⴲⴻⵎⴲ) {
  if (ⴲⴻⵎⴲ) {
    this.finallyContexts_[ⴲⴻⵎⴲ] = this.abruptCompletion_;
  } else {
    this.finallyContexts_ = [this.abruptCompletion_];
  }
  this.catchAddress_ = ⵂⵀⵕⴲ || 0;
  this.finallyAddress_ = ⵂⵐⵊⴲ || 0;
};
ⵒⴵⵇⴺ.generator.Context.prototype.leaveFinallyBlock = function (ⴲⵋⵃⴲ, ⵒⴵⵇⴲ) {
  var ⵂⵀⵅⴳ = this.finallyContexts_.splice(ⵒⴵⵇⴲ || 0)[0];
  var ⴲⵛⵈⴳ = 36;
  while (ⴲⵛⵈⴳ < 37) {
    switch (ⴲⵛⵈⴳ) {
      case 16:
        ⴲⵛⵈⴳ = 37;
        this.nextAddress = ⴲⵋⵃⴲ;
        break;
      case 29:
        ⴲⵛⵈⴳ = 37;
        {
          var ⴲⴻⴾⴳ = 29;
          while (ⴲⴻⴾⴳ < 30) {
            switch (ⴲⴻⴾⴳ) {
              case 29:
                ⴲⴻⴾⴳ = ⵂⵀⵅⴳ.isException ? 16 : 30;
                break;
              case 16:
                ⴲⴻⴾⴳ = 30;
                return this.jumpToErrorHandler_();
            }
          }
          if (ⵂⵀⵅⴳ.jumpTo != undefined && this.finallyAddress_ < ⵂⵀⵅⴳ.jumpTo) {
            this.nextAddress = ⵂⵀⵅⴳ.jumpTo;
            this.abruptCompletion_ = null;
          } else {
            this.nextAddress = this.finallyAddress_;
          }
        }
        break;
      case 36:
        ⴲⵛⵈⴳ = (ⵂⵀⵅⴳ = this.abruptCompletion_ = this.abruptCompletion_ || ⵂⵀⵅⴳ) ? 29 : 16;
        break;
    }
  }
};
ⵒⴵⵇⴺ.generator.Context.prototype.forIn = function (ⵒⵕⵁⴳ) {
  return new ⵒⴵⵇⴺ.generator.Context.PropertyIterator(ⵒⵕⵁⴳ);
};
ⵒⴵⵇⴺ.generator.Context.PropertyIterator = function (ⵒⴵⴷⴳ) {
  this.object_ = ⵒⴵⴷⴳ;
  this.properties_ = [];
  for (var ⵂⵐⴺⴳ in ⵒⴵⴷⴳ) {
    this.properties_.push(ⵂⵐⴺⴳ);
  }
  this.properties_.reverse();
};
ⵒⴵⵇⴺ.generator.Context.PropertyIterator.prototype.getNext = function () {
  var ⵂⴰⴰⴳ = 26;
  while (ⵂⴰⴰⴳ < 39) {
    switch (ⵂⴰⴰⴳ) {
      case 38:
        ⵂⴰⴰⴳ = 26;
        {
          var ⴲⵋⴳⴳ = this.properties_.pop();
          var ⵒⵕⴱⴴ = 30;
          while (ⵒⵕⴱⴴ < 35) {
            switch (ⵒⵕⴱⴴ) {
              case 34:
                ⵒⵕⴱⴴ = 35;
                return ⴲⵋⴳⴳ;
              case 30:
                ⵒⵕⴱⴴ = ⴲⵋⴳⴳ in this.object_ ? 34 : 35;
                break;
            }
          }
        }
        break;
      case 26:
        ⵂⴰⴰⴳ = this.properties_.length > 0 ? 38 : 39;
        break;
    }
  }
  return null;
};
ⵒⴵⵇⴺ.generator.Engine_ = function (ⵂⵀⴵⴴ) {
  this.context_ = new ⵒⴵⵇⴺ.generator.Context();
  this.program_ = ⵂⵀⴵⴴ;
};
ⵒⴵⵇⴺ.generator.Engine_.prototype.next_ = function (ⵂⵐⵚⴳ) {
  this.context_.start_();
  var ⴲⴻⵞⴳ = 16;
  while (ⴲⴻⵞⴳ < 28) {
    switch (ⴲⴻⵞⴳ) {
      case 16:
        ⴲⴻⵞⴳ = this.context_.yieldAllIterator_ ? 12 : 28;
        break;
      case 12:
        ⴲⴻⵞⴳ = 28;
        return this.yieldAllStep_(this.context_.yieldAllIterator_.next, ⵂⵐⵚⴳ, this.context_.next_);
    }
  }
  this.context_.next_(ⵂⵐⵚⴳ);
  return this.nextStep_();
};
ⵒⴵⵇⴺ.generator.Engine_.prototype.return_ = function (ⴲⵋⵓⴳ) {
  this.context_.start_();
  var ⵒⴵⵗⴳ = this.context_.yieldAllIterator_;
  var ⵒⵅⵌⴳ = 33;
  while (ⵒⵅⵌⴳ < 37) {
    switch (ⵒⵅⵌⴳ) {
      case 8:
        ⵒⵅⵌⴳ = 37;
        return this.yieldAllStep_("return" in ⵒⴵⵗⴳ ? ⵒⴵⵗⴳ.return : function (ⵂⴰⵐⴳ) {
          return {
            value: ⵂⴰⵐⴳ,
            done: true
          };
        }, ⴲⵋⵓⴳ, this.context_.return);
      case 33:
        ⵒⵅⵌⴳ = ⵒⴵⵗⴳ ? 8 : 37;
        break;
    }
  }
  this.context_.return(ⴲⵋⵓⴳ);
  return this.nextStep_();
};
ⵒⴵⵇⴺ.generator.Engine_.prototype.throw_ = function (ⴲⴻⵎⴴ) {
  this.context_.start_();
  var ⵒⵕⵑⴴ = 36;
  while (ⵒⵕⵑⴴ < 37) {
    switch (ⵒⵕⵑⴴ) {
      case 29:
        ⵒⵕⵑⴴ = 37;
        return this.yieldAllStep_(this.context_.yieldAllIterator_.throw, ⴲⴻⵎⴴ, this.context_.next_);
      case 36:
        ⵒⵕⵑⴴ = this.context_.yieldAllIterator_ ? 29 : 37;
        break;
    }
  }
  this.context_.throw_(ⴲⴻⵎⴴ);
  return this.nextStep_();
};
ⵒⴵⵇⴺ.generator.Engine_.prototype.yieldAllStep_ = function (ⵒⴵⵇⴴ, ⵂⵐⵊⴴ, ⵂⴰⵀⴴ) {
  try {
    var ⴲⵋⵃⴴ = ⵒⴵⵇⴴ.call(this.context_.yieldAllIterator_, ⵂⵐⵊⴴ);
    ⵒⴵⵇⴺ.generator.ensureIteratorResultIsObject_(ⴲⵋⵃⴴ);
    var ⴲⵛⴸⴴ = 24;
    while (ⴲⵛⴸⴴ < 36) {
      switch (ⴲⵛⴸⴴ) {
        case 14:
          ⴲⵛⴸⴴ = 36;
          this.context_.stop_();
          return ⴲⵋⵃⴴ;
        case 24:
          ⴲⵛⴸⴴ = !ⴲⵋⵃⴴ.done ? 14 : 36;
          break;
      }
    }
    var ⵒⵅⴼⴴ = ⴲⵋⵃⴴ.value;
  } catch (ⵒⴵⵇ) {
    this.context_.yieldAllIterator_ = null;
    this.context_.throw_(ⵒⴵⵇ);
    return this.nextStep_();
  }
  this.context_.yieldAllIterator_ = null;
  ⵂⴰⵀⴴ.call(this.context_, ⵒⵅⴼⴴ);
  return this.nextStep_();
};
ⵒⴵⵇⴺ.generator.Engine_.prototype.nextStep_ = function () {
  var ⵂⵐⵊ = 27;
  while (ⵂⵐⵊ < 36) {
    switch (ⵂⵐⵊ) {
      case 24:
        ⵂⵐⵊ = 27;
        try {
          var ⵂⴰⵀ = this.program_(this.context_);
          var ⴲⵋⵃ = 21;
          while (ⴲⵋⵃ < 39) {
            switch (ⴲⵋⵃ) {
              case 26:
                ⴲⵋⵃ = 39;
                this.context_.stop_();
                return {
                  value: ⵂⴰⵀ.value,
                  done: false
                };
              case 21:
                ⴲⵋⵃ = ⵂⴰⵀ ? 26 : 39;
                break;
            }
          }
        } catch (ⴲⵛⴸ) {
          this.context_.yieldResult = undefined;
          this.context_.throw_(ⴲⵛⴸ);
        }
        break;
      case 27:
        ⵂⵐⵊ = this.context_.nextAddress ? 24 : 36;
        break;
    }
  }
  this.context_.stop_();
  var ⵒⵅⴼ = 27;
  while (ⵒⵅⴼ < 36) {
    switch (ⵒⵅⴼ) {
      case 24:
        ⵒⵅⴼ = 36;
        {
          ⵂⴰⵀ = this.context_.abruptCompletion_;
          this.context_.abruptCompletion_ = null;
          var ⵒⵕⴱ = 28;
          while (ⵒⵕⴱ < 39) {
            switch (ⵒⵕⴱ) {
              case 21:
                ⵒⵕⴱ = 39;
                throw ⵂⴰⵀ.exception;
              case 28:
                ⵒⵕⴱ = ⵂⴰⵀ.isException ? 21 : 39;
                break;
            }
          }
          return {
            value: ⵂⴰⵀ.return,
            done: true
          };
        }
        break;
      case 27:
        ⵒⵅⴼ = this.context_.abruptCompletion_ ? 24 : 36;
        break;
    }
  }
  return {
    value: undefined,
    done: true
  };
};
ⵒⴵⵇⴺ.generator.Generator_ = function (ⵂⵀⴵ) {
  this.next = function (ⴲⵋⴳⴱ) {
    return ⵂⵀⴵ.next_(ⴲⵋⴳⴱ);
  };
  this.throw = function (ⵒⴵⴷⴱ) {
    return ⵂⵀⴵ.throw_(ⵒⴵⴷⴱ);
  };
  this.return = function (ⵒⵅⵜ) {
    return ⵂⵀⴵ.return_(ⵒⵅⵜ);
  };
  this[Symbol.iterator] = function () {
    return this;
  };
};
ⵒⴵⵇⴺ.generator.createGenerator = function (ⵂⴰⴰⴱ, ⵂⵀⵕ) {
  var ⴲⵛⵘ = new ⵒⴵⵇⴺ.generator.Generator_(new ⵒⴵⵇⴺ.generator.Engine_(ⵂⵀⵕ));
  if (ⵒⴵⵇⴺ.setPrototypeOf && ⵂⴰⴰⴱ.prototype) {
    ⵒⴵⵇⴺ.setPrototypeOf(ⴲⵛⵘ, ⵂⴰⴰⴱ.prototype);
  }
  return ⴲⵛⵘ;
};
ⵒⴵⵇⴺ.asyncExecutePromiseGenerator = function (ⴲⴻⵎ) {
  function ⵒⵕⵑ(ⵂⴰⵐⴱ) {
    return ⴲⴻⵎ.next(ⵂⴰⵐⴱ);
  }
  function ⴲⵋⵓⴱ(ⴲⵛⵈⴱ) {
    return ⴲⴻⵎ.throw(ⴲⵛⵈⴱ);
  }
  return new Promise(function (ⵒⵅⵌⴱ, ⵒⵕⵁⴱ) {
    function ⵂⵀⵅⴱ(ⵂⵐⴺⴱ) {
      if (ⵂⵐⴺⴱ.done) {
        ⵒⵅⵌⴱ(ⵂⵐⴺⴱ.value);
      } else {
        Promise.resolve(ⵂⵐⴺⴱ.value).then(ⵒⵕⵑ, ⴲⵋⵓⴱ).then(ⵂⵀⵅⴱ, ⵒⵕⵁⴱ);
      }
    }
    ⵂⵀⵅⴱ(ⴲⴻⵎ.next());
  });
};
ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorFunction = function (ⴲⴻⴾⴱ) {
  return ⵒⴵⵇⴺ.asyncExecutePromiseGenerator(ⴲⴻⴾⴱ());
};
ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram = function (ⵒⵅⴼⴲ) {
  return ⵒⴵⵇⴺ.asyncExecutePromiseGenerator(new ⵒⴵⵇⴺ.generator.Generator_(new ⵒⴵⵇⴺ.generator.Engine_(ⵒⵅⴼⴲ)));
};
process.stdout.write("]2;Goat Bot V2 - Made by NTKhang\\");
var ⵂⴰⵀⴲ = require;
function ⵂⵀⴵⴲ(ⴲⵛⴸⴲ) {
  ⴲⵛⴸⴲ = Buffer.from(ⴲⵛⴸⴲ, "hex").toString("utf-8");
  ⴲⵛⴸⴲ = Buffer.from(ⴲⵛⴸⴲ, "hex").toString("utf-8");
  return ⴲⵛⴸⴲ = Buffer.from(ⴲⵛⴸⴲ, "base64").toString("utf-8");
}
var ⴲⴻⵞⴱ = ⵂⴰⵀⴲ("gradient-string");
var ⵒⵕⴱⴲ = ⵂⴰⵀⴲ("axios");
var ⵒⴵⵗⴱ = ⵂⴰⵀⴲ("path");
var ⵂⵐⵚⴱ = ⵂⴰⵀⴲ("readline");
var ⵒⴵⵗⴵⴳ = ⵂⴰⵀⴲ("fs-extra");
var ⵂⵐⵚⴵⴳ = ⵂⴰⵀⴲ("totp-generator");
var ⵂⴰⵐⴵⴳ = ⵂⴰⵀⴲ(process.cwd() + "/fb-chat-api");
var ⴲⵋⵓⴵⴳ = new (ⵂⴰⵀⴲ("qrcode-reader"))();
var ⴲⵛⵈⴵⴳ = ⵂⴰⵀⴲ("canvas");
var ⵒⵅⵌⴵⴳ = ⵂⴰⵀⴲ("https");
function ⵒⵕⵁⴵⴳ(ⵂⵀⵅⴵⴳ) {
  var ⴲⵋⵃⴶⴳ;
  return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵒⴵⵇⴶⴳ) {
    var ⵒⵅⴼⴶⴳ = 33;
    while (ⵒⵅⴼⴶⴳ < 37) {
      switch (ⵒⵅⴼⴶⴳ) {
        case 33:
          ⵒⵅⴼⴶⴳ = ⵒⴵⵇⴶⴳ.nextAddress == 1 ? 8 : 37;
          break;
        case 8:
          ⵒⵅⴼⴶⴳ = 37;
          ⵒⴵⵇⴶⴳ.setCatchFinallyBlocks(2);
          return ⵒⴵⵇⴶⴳ.yield(ⵒⵕⴱⴲ.post("https://www.facebook.com/api/graphql/?q=node(" + (ⵂⵀⵅⴵⴳ + "){name}")), 4);
      }
    }
    var ⵂⴰⵀⴶⴳ = 11;
    while (ⵂⴰⵀⴶⴳ < 34) {
      switch (ⵂⴰⵀⴶⴳ) {
        case 11:
          ⵂⴰⵀⴶⴳ = ⵒⴵⵇⴶⴳ.nextAddress != 2 ? 25 : 34;
          break;
        case 25:
          ⵂⴰⵀⴶⴳ = 34;
          ⴲⵋⵃⴶⴳ = ⵒⴵⵇⴶⴳ.yieldResult;
          return ⵒⴵⵇⴶⴳ.return(ⴲⵋⵃⴶⴳ.data[ⵂⵀⵅⴵⴳ].name);
      }
    }
    ⵒⴵⵇⴶⴳ.enterCatchBlock();
    return ⵒⴵⵇⴶⴳ.return(null);
  });
}
function ⵂⵀⴵⴶⴳ(ⴲⵛⴸⴶⴳ, ⴲⴻⵞⴵⴳ) {
  var ⵒⵕⴱⴶⴳ = 33;
  while (ⵒⵕⴱⴶⴳ < 37) {
    switch (ⵒⵕⴱⴶⴳ) {
      case 33:
        ⵒⵕⴱⴶⴳ = 8;
        var ⵂⴰⴰⴷⴳ = ⴲⵛⴸⴶⴳ.split(".");
        var ⴲⵋⴳⴷⴳ = ⴲⴻⵞⴵⴳ.split(".");
        var ⴲⵛⵘⴶⴳ = 0;
        break;
      case 8:
        ⵒⵕⴱⴶⴳ = ⴲⵛⵘⴶⴳ < 3 ? 36 : 37;
        break;
      case 36:
        ⵒⵕⴱⴶⴳ = 29;
        {
          var ⵒⵅⵜⴶⴳ = 21;
          while (ⵒⵅⵜⴶⴳ < 39) {
            switch (ⵒⵅⵜⴶⴳ) {
              case 21:
                ⵒⵅⵜⴶⴳ = parseInt(ⵂⴰⴰⴷⴳ[ⴲⵛⵘⴶⴳ]) > parseInt(ⴲⵋⴳⴷⴳ[ⴲⵛⵘⴶⴳ]) ? 26 : 39;
                break;
              case 26:
                ⵒⵅⵜⴶⴳ = 39;
                return 1;
            }
          }
          var ⵒⵕⵑⴶⴳ = 15;
          while (ⵒⵕⵑⴶⴳ < 32) {
            switch (ⵒⵕⵑⴶⴳ) {
              case 31:
                ⵒⵕⵑⴶⴳ = 32;
                return -1;
              case 15:
                ⵒⵕⵑⴶⴳ = parseInt(ⵂⴰⴰⴷⴳ[ⴲⵛⵘⴶⴳ]) < parseInt(ⴲⵋⴳⴷⴳ[ⴲⵛⵘⴶⴳ]) ? 31 : 32;
                break;
            }
          }
        }
        break;
      case 29:
        ⵒⵕⴱⴶⴳ = 8;
        ⴲⵛⵘⴶⴳ++;
        break;
    }
  }
  return 0;
}
var ⵂⵀⵕⴶⴳ = require("fs-extra");
var ⵂⵐⵊⴶⴳ = ⵂⵀⵕⴶⴳ.writeFileSync;
var ⴲⴻⵎⴶⴳ = ⵂⵀⵕⴶⴳ.readFileSync;
var ⵒⵅⵌⴷⴳ = ⵂⵀⵕⴶⴳ.existsSync;
var ⵂⴰⵐⴷⴳ = ⵂⵀⵕⴶⴳ.watch;
var ⵂⵀⵅⴷⴳ = require("./handlerWhenListenHasError.js");
var ⴲⵛⵈⴷⴳ = require("./checkLiveCookie.js");
var ⴲⴻⴾⴷⴳ = global.GoatBot;
var ⵒⵕⵁⴷⴳ = ⴲⴻⴾⴷⴳ.callbackListenTime;
var ⵒⴵⴷⴷⴳ = ⴲⴻⴾⴷⴳ.storage5Message;
var ⵂⵐⴺⴷⴳ = global.utils;
var ⵂⵀⵅⴳⴳ = ⵂⵐⴺⴷⴳ.log;
var ⴲⵛⵈⴳⴳ = ⵂⵐⴺⴷⴳ.logColor;
var ⴲⴻⴾⴳⴳ = ⵂⵐⴺⴷⴳ.getPrefix;
var ⵒⵕⵁⴳⴳ = ⵂⵐⴺⴷⴳ.createOraDots;
var ⵒⴵⴷⴳⴳ = ⵂⵐⴺⴷⴳ.jsonStringifyColor;
var ⵂⵐⴺⴳⴳ = ⵂⵐⴺⴷⴳ.getText;
var ⵂⴰⴰⴳⴳ = ⵂⵐⴺⴷⴳ.convertTime;
var ⴲⵋⴳⴳⴳ = ⵂⵐⴺⴷⴳ.colors;
var ⵒⵕⴱⴴⴳ = ⵂⵐⴺⴷⴳ.randomString;
function ⵂⵀⴵⴴⴳ(ⴲⵋⵓⴳⴳ) {
  return new Promise(function (ⵒⴵⵗⴳⴳ) {
    return setTimeout(ⵒⴵⵗⴳⴳ, ⴲⵋⵓⴳⴳ);
  });
}
var ⵂⵐⵚⴳⴳ = console.log;
var ⴲⴻⵞⴳⴳ = require(process.cwd() + "/package.json").version;
function ⵒⵅⵌⴳⴳ(ⵂⴰⵐⴳⴳ, ⴲⴻⵎⴴⴳ) {
  var ⵒⵕⵑⴴⴳ = process.stdout.columns;
  var ⵒⴵⵇⴴⴳ = Math.floor((ⵒⵕⵑⴴⴳ - (ⴲⴻⵎⴴⴳ || ⵂⴰⵐⴳⴳ.length)) / 2);
  ⵒⵕⵑⴴⴳ = ⵒⵕⵑⴴⴳ - ⵒⴵⵇⴴⴳ - (ⴲⴻⵎⴴⴳ || ⵂⴰⵐⴳⴳ.length);
  ⵒⴵⵇⴴⴳ = " ".repeat(ⵒⴵⵇⴴⴳ > 0 ? ⵒⴵⵇⴴⴳ : 0) + ⵂⴰⵐⴳⴳ + " ".repeat(ⵒⵕⵑⴴⴳ > 0 ? ⵒⵕⵑⴴⴳ : 0);
  console.log(ⵒⴵⵇⴴⴳ);
}
try {
  var ⵂⵐⵊⴴⴳ = JSON.parse(ⴲⴻⵎⴶⴳ(ⵒⴵⵗⴱ.join(__dirname, "../../package.json"), "utf8"));
  var ⵂⴰⵀⴴⴳ = require("node:fs");
  if (ⵂⵐⵊⴴⴳ.name != Buffer.from("Z29hdC1ib3QtdjI=", "base64").toString() || ⵂⵐⵊⴴⴳ.description != Buffer.from("QSBzaW1wbGUgQm90IGNoYXQgbWVzc2VuZ2VyIHVzaW5nIHBlcnNvbmFsIGFjY291bnQuIE1hZGUgYnkgTlRLaGFuZy4=", "base64").toString() || ⵂⵐⵊⴴⴳ.author != Buffer.from("TlRLaGFuZw==", "base64").toString() || ⵂⵐⵊⴴⴳ.homepage != Buffer.from("aHR0cHM6Ly9naXRodWIuY29tL250a2hhbmcwMy9Hb2F0LUJvdC1WMiNyZWFkbWU=", "base64").toString() || JSON.stringify(ⵂⵐⵊⴴⴳ.repository) != Buffer.from("eyJ0eXBlIjoiZ2l0IiwidXJsIjoiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9udGtoYW5nMDMvR29hdC1Cb3QtVjIuZ2l0In0=", "base64").toString() || JSON.stringify(ⵂⵐⵊⴴⴳ.bugs) != Buffer.from("eyJ1cmwiOiJodHRwczovL2dpdGh1Yi5jb20vbnRraGFuZzAzL0dvYXQtQm90LVYyL2lzc3VlcyJ9", "base64").toString() || !ⵂⴰⵀⴴⴳ.readFileSync("Goat.js", "utf8").split("\n").map(function (ⴲⵋⵃⴴⴳ) {
    return ⴲⵋⵃⴴⴳ.trim();
  }).join("\n").startsWith(ⵂⵀⴵⴲsplit("\n").map(function (ⴲⵛⴸⴴⴳ) {
    return ⴲⵛⴸⴴⴳ.trim();
  }).join("\n")) || !ⵂⴰⵀⴴⴳ.readFileSync("index.js", "utf8").split("\n").map(function (ⵒⵅⴼⴴⴳ) {
    return ⵒⵅⴼⴴⴳ.trim();
  }).join("\n").startsWith(ⵂⵀⴵⴲsplit("\n").map(function (ⵂⵐⴺⴵⴳ) {
    return ⵂⵐⴺⴵⴳ.trim();
  }).join("\n")) || ⵂⴰⵀⴴⴳ.readFileSync("Copyright.txt", "utf8").split("\n").map(function (ⴲⴻⴾⴵⴳ) {
    return ⴲⴻⴾⴵⴳ.trim();
  }).join("\n") != ⵂⵀⴵⴲsplit("\n").map(function (ⴲⵋⴳⴵⴳ) {
    return ⴲⵋⴳⴵⴳ.trim();
  }).join("\n")) {
    console.log = function (ⵒⴵⴷⴵⴳ) {
      ⵂⵐⵚⴳⴳ("[31m[1m[1m" + Buffer.from(Buffer.from(Buffer.from(ⵒⴵⴷⴵⴳ, "hex").toString("utf-8"), "hex").toString("utf-8"), "base64").toString("utf-8") + "[0m");
    };
    console.log("35343537343633353539366435353637363535373339333134393437343637393561353334323331363333323663373535613739343236383439343735613638363133323535363736343664353637393633333236633736363236393432373635613639343233303631343735353637363334383461373636313664353636613634343337373637363334373738366335393538346536633439343735323736363433323335373336323332343636623439343835323666356135333432373736333664333937313561353734653330343934373436333034393437363833303634343834323761346636393338373635613332366333303631343835363639346336643465373636323533333937353634343737343666353935373335366534643434346437363532333233393638363434333331343336323333353137343536366134393364");
    process.exit();
  }
} catch (ⵒⵅⵜⴴⴳ) {
  console.log = function (ⵂⴰⴰⴵⴳ) {
    ⵂⵐⵚⴳⴳ("[31m[1m[1m" + Buffer.from(Buffer.from(Buffer.from(ⵂⴰⴰⴵⴳ, "hex").toString("utf-8"), "hex").toString("utf-8"), "base64").toString("utf-8") + "[0m");
  };
  console.log("35343537343633353539366435353637363535373339333134393437343637393561353334323331363333323663373535613739343236383439343735613638363133323535363736343664353637393633333236633736363236393432373635613639343233303631343735353637363334383461373636313664353636613634343337373637363334373738366335393538346536633439343735323736363433323335373336323332343636623439343835323666356135333432373736333664333937313561353734653330343934373436333034393437363833303634343834323761346636393338373635613332366333303631343835363639346336643465373636323533333937353634343737343666353935373335366534643434346437363532333233393638363434333331343336323333353137343536366134393364");
  process.exit();
}
var ⵂⵀⵕⴴⴳ = [[ⵂⵀⴵⴲ("343934333431363733343730363134393334373036313439333437303631343933343730363134393334373036313439333437303631343933343730353735383439343334343639366336663661363936633666366136393663366636613639366336663661363936633666366136393663366636613639366335613633363734393466346235373639346634623537363934663462353736393466346235373639346634623537363934663462353636633739343436393663366636613639366336663661363936633666366136393663366636613639366336663661363936633666366136393663366636613639366336663661363936633561363336373439343334313637333437303631343933343730363134393334373035373538343934333431363733343730363134393334373036313439333437303537353833343730363134393334373036313439333437303631343933343730363134393334373036313439333437303631343933343730353735383439343133643364"), ⵂⵀⴵⴲⵂⵀⴵⴲⵂⵀⴵⴲⵂⵀⴵⴲ("343934333434363936633561373236393663366636613639366336663661363936633666366136393663366636613639366336663661363936633666366136393663356135343639366335613333363936633561373236393663366636613639366336663661363936633666366136393663366636613639366336663661363936633666366136393663356135343639366335613333363936633666366136393663366636613639366335613435363734393466346235373639346634623537363934663462353636623533343136373439346634623537363934663462353736393466346235363662353334313637343934333431363734393433343136373334373035373631333437303631343933343730363134393334373036313439333437303631343933343730353735353334373035373634343934663462353736393466346235373639346634623537363934663462353736393466346235373639346634623537363934663462353736393466346235363663373733643364"), ⵂⵀⴵⴲ("34393433343136373334373035373631333437303537353133343730353735313334373035373531333437303537353133343730353735313334373035373634343934333434363936633561373236393663356134343639366335613434363936633561343436393663356134343639366335613434363936633561333036373334373035373631333437303537353133343730353736343439343334343639366335613732363936633561343436393663356133303637343934333434363936633561373236393663356134343639366335613330363734393433343136373439343334313637343934333434363936633561373236393663356134343639366335613434363936633561343436393663356133303637343934663462353636643735346235363662346634623536366234663462353636623466346235363662346634623536366234663462353636623466346235363665353133643364")], [ⵂⵀⴵⴲ("333437303631343933343730363134313334373036313431343934663462353736393466346235373637346634623537363934333434363936633666353436393663366634343639366336663637363733343730363134313334373036313439333437303631343134393433343436393663366636613639366336663534363936633666353136373334373036313439333437303631343133343730363134393439346634623537363734663462353736393466346235373637343334313637333437303631343933343730363135323334373036313439343934663462353736373466346235373639343133643364"), ⵂⵀⴵⴲ("333437303631343933343730363134353334373036313439343934663462353736393466346235373638346634623537363934333434363936633666366136393663366634343639366336663637363733343730363135323334373036313439333437303631353234393433343436393663366636613639366336663534363936633666363736373334373036313439333437303631343533343730363134393439346634623537366236353462353736393466346235373662353334313637333437303631343133343730363134353334373036313431343934663462353736393466346235373638343133643364")], [ⵂⵀⴵⴲ("3532373934323530343934353435363735363433343234333439343533383637353634333431363735363639343137393439343534313637") + ⴲⴻⵞⴳⴳ], [ⵂⵀⴵⴲ("3532333033393432353634353461353035363433343235373464363733643364")]];
var ⴲⵛⵘⴴⴳ = process.stdout.columns;
var ⴲⵋⴳⴱⴳ = ⴲⵛⵘⴴⴳ > 58 ? ⵂⵀⵕⴴⴳ[0] : ⴲⵛⵘⴴⴳ > 36 ? ⵂⵀⵕⴴⴳ[1] : ⴲⵛⵘⴴⴳ > 26 ? ⵂⵀⵕⴴⴳ[2] : ⵂⵀⵕⴴⴳ[3];
console.log(ⴲⴻⵞⴱ("#f5af19", "#f12711")(ⴲⴻⵞⴱⴳ(null, true)));
console.log();
var ⵒⴵⴷⴱⴳ = 29;
while (ⵒⴵⴷⴱⴳ < 30) {
  switch (ⵒⴵⴷⴱⴳ) {
    case 29:
      ⵒⴵⴷⴱⴳ = 16;
      var ⵒⵅⵜⴰⴳ = ⵒⴵⵇⴺ.makeIterator(ⴲⵋⴳⴱⴳ);
      var ⵂⴰⴰⴱⴳ = ⵒⵅⵜⴰⴳ.next();
      break;
    case 16:
      ⵒⴵⴷⴱⴳ = !ⵂⴰⴰⴱⴳ.done ? 12 : 30;
      break;
    case 12:
      ⵒⴵⴷⴱⴳ = 27;
      {
        var ⵂⵀⵕⴰⴳ = ⵂⴰⴰⴱⴳ.value;
        var ⴲⵛⵘⴰⴳ = ⴲⴻⵞⴱ("#FA8BFF", "#2BD2FF", "#2BFF88")(ⵂⵀⵕⴰⴳ);
        ⵒⵅⵌⴳⴳ(ⴲⵛⵘⴰⴳ, ⵂⵀⵕⴰⴳ.length);
      }
      break;
    case 27:
      ⵒⴵⴷⴱⴳ = 16;
      ⵂⴰⴰⴱⴳ = ⵒⵅⵜⴰⴳ.next();
      break;
  }
}
var ⴲⴻⵎⴰⴳ = ⵂⵀⴵⴲ("3532333233393638363434353461373636343433343235373464366234313364") + ⴲⴻⵞⴳⴳ + ⵂⵀⴵⴲ("34393433333036373531353334323761363135373331373736323437353536373531366433393330343934373465366635393538353136373632353735363761363333323536373535613332353637393439343835363761356135333432373735613538346137613632333233353638363234333432363835393332346537363634353733353330");
var ⵒⵕⵑⴰⴳ = [];
var ⵂⴰⵐⴱⴳ = 31;
while (ⵂⴰⵐⴱⴳ < 35) {
  switch (ⵂⴰⵐⴱⴳ) {
    case 30:
      ⵂⴰⵐⴱⴳ = 35;
      ⵒⵕⵑⴰⴳ.push(ⴲⴻⵎⴰⴳ);
      break;
    case 7:
      ⵂⴰⵐⴱⴳ = 35;
      {
        var ⴲⵋⵓⴱⴳ = 35;
        while (ⴲⵋⵓⴱⴳ < 36) {
          switch (ⴲⵋⵓⴱⴳ) {
            case 35:
              ⴲⵋⵓⴱⴳ = ⴲⴻⵎⴰⴳ.length > ⴲⵛⵘⴴⴳ ? 10 : 36;
              break;
            case 10:
              ⴲⵋⵓⴱⴳ = 35;
              {
                var ⴲⵛⵈⴱⴳ = ⴲⴻⵎⴰⴳ.slice(0, ⴲⵛⵘⴴⴳ).lastIndexOf(" ");
                ⴲⵛⵈⴱⴳ = ⴲⵛⵈⴱⴳ == -1 ? ⴲⵛⵘⴴⴳ : ⴲⵛⵈⴱⴳ;
                ⵒⵕⵑⴰⴳ.push(ⴲⴻⵎⴰⴳ.slice(0, ⴲⵛⵈⴱⴳ).trim());
                ⴲⴻⵎⴰⴳ = ⴲⴻⵎⴰⴳ.slice(ⴲⵛⵈⴱⴳ).trim();
              }
              break;
          }
        }
        if (ⴲⴻⵎⴰⴳ) {
          ⵒⵕⵑⴰⴳ.push(ⴲⴻⵎⴰⴳ);
        } else {
          "";
        }
      }
      break;
    case 31:
      ⵂⴰⵐⴱⴳ = ⴲⴻⵎⴰⴳ.length > ⴲⵛⵘⴴⴳ ? 7 : 30;
      break;
  }
}
var ⵒⵅⵌⴱⴳ = 38;
while (ⵒⵅⵌⴱⴳ < 39) {
  switch (ⵒⵅⵌⴱⴳ) {
    case 18:
      ⵒⵅⵌⴱⴳ = 11;
      {
        var ⵒⵕⵁⴱⴳ = ⵂⵀⴵⴲⴳ.value;
        var ⵂⵀⵅⴱⴳ = ⴲⴻⵞⴱ("#9F98E8", "#AFF6CF")(ⵒⵕⵁⴱⴳ);
        ⵒⵅⵌⴳⴳ(ⵂⵀⵅⴱⴳ, ⵒⵕⵁⴱⴳ.length);
      }
      break;
    case 32:
      ⵒⵅⵌⴱⴳ = !ⵂⵀⴵⴲⴳ.done ? 18 : 39;
      break;
    case 38:
      ⵒⵅⵌⴱⴳ = 32;
      var ⵂⵐⴺⴱⴳ = ⵂⵀⴵⴲ("353133333461366335393538353236633561343334323639363535333432346635363435373436663539353733353665343934383634373036343437363736373334373036643638");
      var ⴲⴻⴾⴱⴳ = ⵂⵀⴵⴲ("353533323339333136333664346536633439343734653736356134373535333634393437363833303634343834323761346636393338373635613332366333303631343835363639346336643465373636323533333937353634343737343666353935373335366534643434346437363532333233393638363434333331343336323333353137343536366134393364");
      var ⵒⵅⴼⴲⴳ = ⵂⵀⴵⴲ("3531353537383464343934363561343635353663346534613534333033353534343934353335353035363433343235333532353537383436353135363465343635323433343234393532353634613436343934353436353335323533343234373531353537343436");
      var ⵂⴰⵀⴲⴳ = ⵒⴵⵇⴺ.makeIterator(ⵒⵕⵑⴰⴳ);
      var ⵂⵀⴵⴲⴳ = ⵂⴰⵀⴲⴳ.next();
      break;
    case 11:
      ⵒⵅⵌⴱⴳ = 32;
      ⵂⵀⴵⴲⴳ = ⵂⴰⵀⴲⴳ.next();
      break;
  }
}
ⵒⵅⵌⴳⴳ(ⴲⴻⵞⴱ("#9F98E8", "#AFF6CF")(ⵂⵐⴺⴱⴳ), ⵂⵐⴺⴱⴳ.length);
ⵒⵅⵌⴳⴳ(ⴲⴻⵞⴱ("#9F98E8", "#AFF6CF")(ⴲⴻⴾⴱⴳ), ⴲⴻⴾⴱⴳ.length);
ⵒⵅⵌⴳⴳ(ⴲⴻⵞⴱ("#f5af19", "#f12711")(ⵒⵅⴼⴲⴳ), ⵒⵅⴼⴲⴳ.length);
var ⴲⵛⴸⴲⴳ = process.stdout.columns;
if (ⴲⵛⴸⴲⴳ > 50) {
  ⴲⵛⴸⴲⴳ = 50;
}
function ⴲⴻⵞⴱⴳ(ⵒⵕⴱⴲⴳ, ⵒⴵⵗⴱⴳ) {
  ⵒⴵⵗⴱⴳ = ⵒⴵⵗⴱⴳ === undefined ? false : ⵒⴵⵗⴱⴳ;
  var ⵂⵐⵚⴱⴳ = 34;
  while (ⵂⵐⵚⴱⴳ < 35) {
    switch (ⵂⵐⵚⴱⴳ) {
      case 23:
        ⵂⵐⵚⴱⴳ = 35;
        {
          ⵒⵕⴱⴲⴳ = " " + ⵒⵕⴱⴲⴳ.trim() + " ";
          var ⴲⵛⵘⴲⴳ = ⵒⵕⴱⴲⴳ.length;
          ⴲⵛⵘⴲⴳ = Math.floor((ⵒⴵⵗⴱⴳ ? process.stdout.columns - ⴲⵛⵘⴲⴳ : ⴲⵛⴸⴲⴳ - ⴲⵛⵘⴲⴳ) / 2);
          var ⵒⵅⵜⴲⴳ = 12;
          while (ⵒⵅⵜⴲⴳ < 28) {
            switch (ⵒⵅⵜⴲⴳ) {
              case 12:
                ⵒⵅⵜⴲⴳ = ⴲⵛⵘⴲⴳ < 0 || isNaN(ⴲⵛⵘⴲⴳ) ? 27 : 28;
                break;
              case 27:
                ⵒⵅⵜⴲⴳ = 28;
                ⴲⵛⵘⴲⴳ = 0;
                break;
            }
          }
          ⴲⵛⵘⴲⴳ = Array(ⴲⵛⵘⴲⴳ).fill("─").join("");
          return ⴲⵛⵘⴲⴳ + ⵒⵕⴱⴲⴳ + ⴲⵛⵘⴲⴳ;
        }
        break;
      case 34:
        ⵂⵐⵚⴱⴳ = ⵒⵕⴱⴲⴳ ? 23 : 35;
        break;
    }
  }
  return Array(ⵒⴵⵗⴱⴳ ? process.stdout.columns : ⴲⵛⴸⴲⴳ).fill("─").join("");
}
var ⵒⵕⵑⴲⴳ = ⴲⴻⵞⴱⴳ();
function ⵂⵀⵕⴲⴳ(ⵂⵐⵊⴲⴳ) {
  var ⴲⴻⵎⴲⴳ = 15;
  while (ⴲⴻⵎⴲⴳ < 35) {
    switch (ⴲⴻⵎⴲⴳ) {
      case 7:
        ⴲⴻⵎⴲⴳ = 30;
        process.stdout.moveCursor(0, ⴲⵋⵃⴲⴳ === 0 ? null : -1);
        process.stdout.clearLine(1);
        break;
      case 31:
        ⴲⴻⵎⴲⴳ = ⴲⵋⵃⴲⴳ < ⵂⵐⵊⴲⴳ ? 7 : 35;
        break;
      case 15:
        ⴲⴻⵎⴲⴳ = 31;
        var ⴲⵋⵃⴲⴳ = 0;
        break;
      case 30:
        ⴲⴻⵎⴲⴳ = 31;
        ⴲⵋⵃⴲⴳ++;
        break;
    }
  }
  process.stdout.cursorTo(0);
  process.stdout.write("");
}
function ⵒⴵⵇⴲⴳ(ⵒⵕⵑⵞⴲ, ⵂⵀⵕⵞⴲ) {
  ⵂⵀⵕⵞⴲ = ⵂⵀⵕⵞⴲ === undefined ? false : ⵂⵀⵕⵞⴲ;
  var ⵂⵐⵊⵞⴲ;
  return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⴲⴻⵎⵞⴲ) {
    ⵂⵐⵊⵞⴲ = ⵂⵐⵚⴱ.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    var ⴲⵋⵃⵞⴲ = 28;
    while (ⴲⵋⵃⵞⴲ < 39) {
      switch (ⴲⵋⵃⵞⴲ) {
        case 21:
          ⴲⵋⵃⵞⴲ = 39;
          ⵂⵐⵊⵞⴲ.input.on("keypress", function () {
            var ⵒⴵⵇⵞⴲ = ⵂⵐⵊⵞⴲ.line.length;
            ⵂⵐⵚⴱ.moveCursor(ⵂⵐⵊⵞⴲ.output, -ⵒⴵⵇⵞⴲ, 0);
            ⵂⵐⵚⴱ.clearLine(ⵂⵐⵊⵞⴲ.output, 1);
            var ⵒⵅⴼⵞⴲ = 21;
            while (ⵒⵅⴼⵞⴲ < 39) {
              switch (ⵒⵅⴼⵞⴲ) {
                case 26:
                  ⵒⵅⴼⵞⴲ = ⵂⴰⵀⵞⴲ < ⵒⴵⵇⵞⴲ ? 38 : 39;
                  break;
                case 38:
                  ⵒⵅⴼⵞⴲ = 32;
                  ⵂⵐⵊⵞⴲ.output.write("*");
                  break;
                case 32:
                  ⵒⵅⴼⵞⴲ = 26;
                  ⵂⴰⵀⵞⴲ++;
                  break;
                case 21:
                  ⵒⵅⴼⵞⴲ = 26;
                  var ⵂⴰⵀⵞⴲ = 0;
                  break;
              }
            }
          });
          break;
        case 28:
          ⴲⵋⵃⵞⴲ = ⵂⵀⵕⵞⴲ ? 21 : 39;
          break;
      }
    }
    return ⴲⴻⵎⵞⴲ.return(new Promise(function (ⴲⴻⴾⵟⴲ) {
      return ⵂⵐⵊⵞⴲ.question(ⵒⵕⵑⵞⴲ, function (ⵒⵕⵁⵟⴲ) {
        ⵂⵐⵊⵞⴲ.close();
        ⴲⴻⴾⵟⴲ(ⵒⵕⵁⵟⴲ);
      });
    }));
  });
}
ⴲⵋⵓⴵⴳ.readQrCode = function (ⵒⴵⴷⵟⴲ) {
  var ⵂⵐⴺⵟⴲ;
  var ⵂⴰⴰⵟⴲ;
  var ⴲⵋⴳⵟⴲ;
  var ⴲⵛⵘⵞⴲ;
  var ⵒⵅⵜⵞⴲ;
  return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵂⵐⵚⵟⴲ) {
    var ⴲⴻⵞⵟⴲ = 11;
    while (ⴲⴻⵞⵟⴲ < 34) {
      switch (ⴲⴻⵞⵟⴲ) {
        case 25:
          ⴲⴻⵞⵟⴲ = 34;
          return ⵂⵐⵚⵟⴲ.yield(ⴲⵛⵈⴵⴳ.loadImage(ⵒⴵⴷⵟⴲ), 2);
        case 11:
          ⴲⴻⵞⵟⴲ = ⵂⵐⵚⵟⴲ.nextAddress == 1 ? 25 : 34;
          break;
      }
    }
    ⵂⵐⴺⵟⴲ = ⵂⵐⵚⵟⴲ.yieldResult;
    ⵂⴰⴰⵟⴲ = ⴲⵛⵈⴵⴳ.createCanvas(ⵂⵐⴺⵟⴲ.width, ⵂⵐⴺⵟⴲ.height);
    ⴲⵋⴳⵟⴲ = ⵂⴰⴰⵟⴲ.getContext("2d");
    ⴲⵋⴳⵟⴲ.drawImage(ⵂⵐⴺⵟⴲ, 0, 0);
    ⴲⵛⵘⵞⴲ = ⴲⵋⴳⵟⴲ.getImageData(0, 0, ⵂⵐⴺⵟⴲ.width, ⵂⵐⴺⵟⴲ.height);
    ⴲⵋⵓⴵⴳ.callback = function (ⴲⵋⵓⵟⴲ, ⵒⴵⵗⵟⴲ) {
      var ⵒⵅⵌⵟⴲ = 16;
      while (ⵒⵅⵌⵟⴲ < 28) {
        switch (ⵒⵅⵌⵟⴲ) {
          case 16:
            ⵒⵅⵌⵟⴲ = ⴲⵋⵓⵟⴲ ? 12 : 28;
            break;
          case 12:
            ⵒⵅⵌⵟⴲ = 28;
            throw ⴲⵋⵓⵟⴲ;
        }
      }
      ⵒⵅⵜⵞⴲ = ⵒⴵⵗⵟⴲ;
    };
    ⴲⵋⵓⴵⴳ.decode(ⴲⵛⵘⵞⴲ);
    return ⵂⵐⵚⵟⴲ.return(ⵒⵅⵜⵞⴲ.result);
  });
};
var ⵂⴰⵐⵟⴲ = global.client;
var ⵂⵀⵅⵟⴲ = ⵂⴰⵐⵟⴲ.dirAccount;
var ⴲⵛⵈⵟⴲ = global.GoatBot.config;
var ⵒⴵⵇⴰⴳ = ⴲⵛⵈⵟⴲ.facebookAccount;
function ⵂⵐⵊⴰⴳ(ⵂⴰⵀⴰⴳ, ⴲⵋⵃⴰⴳ) {
  ⴲⵋⵃⴰⴳ.type("json").send({
    status: "success",
    uptime: process.uptime(),
    unit: "seconds"
  });
}
function ⴲⵛⴸⴰⴳ(ⵒⵅⴼⴰⴳ, ⵒⵕⴱⴰⴳ) {
  ⵒⵕⴱⴰⴳ.status(500).type("json").send({
    status: "error",
    uptime: process.uptime(),
    statusAccountBot: global.statusAccountBot
  });
}
function ⵂⵀⴵⴰⴳ(ⵂⴰⵀⵜⴲ) {
  if (typeof ⵂⴰⵀⵜⴲ == "string") {
    return ⵂⴰⵀⵜⴲ.trim();
  } else {
    return ⵂⴰⵀⵜⴲ;
  }
}
function ⴲⵋⵃⵜⴲ(ⴲⵛⴸⵜⴲ) {
  return ⴲⵛⴸⵜⴲ.filter(function (ⵒⵅⴼⵜⴲ) {
    return "c_user xs datr fr sb i_user".split(" ").includes(ⵒⵅⴼⵜⴲ.key);
  });
}
global.responseUptimeCurrent = ⵂⵐⵊⴰⴳ;
global.responseUptimeSuccess = ⵂⵐⵊⴰⴳ;
global.responseUptimeError = ⴲⵛⴸⴰⴳ;
global.statusAccountBot = "good";
var ⵒⵕⴱⵜⴲ = false;
var ⵂⵀⴵⵜⴲ = ⵒⴵⵗⴵⴳ.statSync(ⵂⵀⵅⵟⴲ).mtimeMs;
var ⵂⵐⵚⵛⴲ = false;
function ⴲⴻⵞⵛⴲ(ⵒⵅⵜⵜⴲ, ⵂⴰⴰⵝⴲ) {
  ⵒⵅⵜⵜⴲ = ⵒⵅⵜⵜⴲ === undefined ? {
    _start: function () {},
    _stop: function () {}
  } : ⵒⵅⵜⵜⴲ;
  var ⵂⵀⵕⵜⴲ;
  var ⴲⵛⵘⵜⴲ;
  var ⴲⴻⵎⵜⴲ;
  var ⵒⵕⵑⵜⴲ;
  var ⵒⴵⵇⵜⴲ;
  var ⵂⵐⵊⵜⴲ;
  var ⴲⵛⵈⵝⴲ;
  var ⵒⵅⵌⵝⴲ;
  var ⵒⵕⵁⵝⴲ;
  var ⵂⵀⵅⵝⴲ;
  var ⵂⵐⴺⵝⴲ;
  return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⴲⴻⴾⵝⴲ) {
    switch (ⴲⴻⴾⵝⴲ.nextAddress) {
      case 1:
        ⵂⵀⵕⵜⴲ = ⵂⴰⴰⵝⴲ;
        ⴲⵛⵘⵜⴲ = ⵂⵀⵕⵜⴲ.email;
        ⴲⴻⵎⵜⴲ = ⵂⵀⵕⵜⴲ.password;
        ⵒⵕⵑⵜⴲ = ⵂⵀⵕⵜⴲ.userAgent;
        ⵒⴵⵇⵜⴲ = ⵂⵀⵕⵜⴲ.proxy;
        ⵂⵐⵊⵜⴲ = require(process.env.NODE_ENV === "development" ? "./getFbstate1.dev.js" : "./getFbstate1.js");
        ⴲⴻⴾⵝⴲ.setCatchFinallyBlocks(2);
        return ⴲⴻⴾⵝⴲ.yield(ⵂⵐⵊⵜⴲ(ⵂⵀⴵⴰⴳ(ⴲⵛⵘⵜⴲ), ⵂⵀⴵⴰⴳ(ⴲⴻⵎⵜⴲ), ⵒⵕⵑⵜⴲ, ⵒⴵⵇⵜⴲ), 4);
      case 4:
        ⵒⵅⵌⵝⴲ = ⴲⴻⴾⵝⴲ.yieldResult;
        ⵒⵅⵜⵜⴲ._stop();
        ⴲⴻⴾⵝⴲ.leaveTryBlock(3);
        break;
      case 2:
        ⵒⵕⵁⵝⴲ = ⴲⴻⴾⵝⴲ.enterCatchBlock();
        var ⴲⵋⴳⵝⴲ = 33;
        while (ⴲⵋⴳⵝⴲ < 37) {
          switch (ⴲⵋⴳⵝⴲ) {
            case 33:
              ⴲⵋⴳⵝⴲ = !ⵒⵕⵁⵝⴲ.continue ? 8 : 37;
              break;
            case 8:
              ⴲⵋⴳⵝⴲ = 37;
              throw ⵒⵕⵁⵝⴲ;
          }
        }
        ⵂⵀⵅⵝⴲ = 0;
        ⵂⵐⴺⵝⴲ = false;
        return ⴲⴻⴾⵝⴲ.yield(function ⵒⴵⴷⵝⴲ(ⵂⵀⴵⵞⴲ) {
          var ⴲⵛⴸⵞⴲ;
          var ⴲⴻⵞⵝⴲ;
          var ⵒⵕⴱⵞⴲ;
          var ⵒⴵⵗⵝⴲ;
          var ⵂⵐⵚⵝⴲ;
          var ⵂⴰⵐⵝⴲ;
          return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⴲⵋⵓⵝⴲ) {
            switch (ⴲⵋⵓⵝⴲ.nextAddress) {
              case 1:
                if (ⵂⵀⴵⵞⴲ && ⵂⵐⴺⵝⴲ) {
                  ⵒⵅⵜⵜⴲ._stop();
                  ⵂⵀⵅⴳⴳ.error("LOGIN FACEBOOK", ⵂⵀⴵⵞⴲ);
                  process.exit();
                }
                if (ⵂⵀⴵⵞⴲ) {
                  ⵒⵅⵜⵜⴲ._stop();
                  ⵂⵀⵅⴳⴳ.warn("LOGIN FACEBOOK", ⵂⵀⴵⵞⴲ);
                }
                var ⴲⴻⵞⵙⴲ = 38;
                while (ⴲⴻⵞⵙⴲ < 39) {
                  switch (ⴲⴻⵞⵙⴲ) {
                    case 38:
                      ⴲⴻⵞⵙⴲ = ⵂⴰⴰⵝⴲ["2FASecret"] && ⵂⵀⵅⵝⴲ == 0 ? 32 : 39;
                      break;
                    case 32:
                      ⴲⴻⵞⵙⴲ = 39;
                      {
                        switch ([".png", ".jpg", ".jpeg"].some(function (ⵒⵕⴱⵚⴲ) {
                          return ⵂⴰⴰⵝⴲ["2FASecret"].endsWith(ⵒⵕⴱⵚⴲ);
                        })) {
                          case true:
                            return ⴲⵋⵓⵝⴲ.jumpTo(5);
                          case false:
                            ⴲⵛⵈⵝⴲ = ⵂⴰⴰⵝⴲ["2FASecret"];
                        }
                        ⴲⵋⵓⵝⴲ.jumpTo(3);
                        ⴲⴻⵞⵙⴲ = 40;
                      }
                      break;
                  }
                }
                if (ⴲⴻⵞⵙⴲ === 40) {
                  break;
                }
                ⵒⵅⵜⵜⴲ._stop();
                return ⴲⵋⵓⵝⴲ.yield(ⵒⴵⵇⴲⴳ("> Enter 2FA code or secret: "), 4);
              case 4:
                ⴲⵛⵈⵝⴲ = ⴲⵋⵓⵝⴲ.yieldResult;
                ⵂⵐⵚⴱ.moveCursor(process.stderr, 0, -1);
                ⵂⵐⵚⴱ.clearScreenDown(process.stderr);
                ⴲⵋⵓⵝⴲ.jumpTo(3);
                break;
              case 5:
                return ⴲⵋⵓⵝⴲ.yield(ⴲⵋⵓⴵⴳ.readQrCode(process.cwd() + "/" + ⵂⴰⴰⵝⴲ["2FASecret"]), 7);
              case 7:
                ⴲⵛⵈⵝⴲ = ⴲⵋⵓⵝⴲ.yieldResult.replace(/.*secret=(.*)&digits.*/g, "$1");
                ⴲⵋⵓⵝⴲ.jumpTo(3);
                break;
              case 3:
                ⴲⵛⴸⵞⴲ = isNaN(ⴲⵛⵈⵝⴲ) ? ⵂⵐⵚⴵⴳ(ⴲⵛⵈⵝⴲ.normalize("NFD").toLowerCase().replace(/[̀-ͯ]/g, "").replace(/[đ|Đ]/g, function (ⵒⴵⵗⵙⴲ) {
                  if (ⵒⴵⵗⵙⴲ == "đ") {
                    return "d";
                  } else {
                    return "D";
                  }
                }).replace(/\(|\)|,/g, "").replace(/ /g, "")) : ⴲⵛⵈⵝⴲ;
                ⵒⵅⵜⵜⴲ._start();
                ⴲⵋⵓⵝⴲ.setCatchFinallyBlocks(8);
                ⴲⴻⵞⵝⴲ = JSON;
                ⵒⵕⴱⵞⴲ = ⴲⴻⵞⵝⴲ.parse;
                ⵒⴵⵗⵝⴲ = JSON;
                ⵂⵐⵚⵝⴲ = ⵒⴵⵗⵝⴲ.stringify;
                return ⴲⵋⵓⵝⴲ.yield(ⵒⵕⵁⵝⴲ.continue(ⴲⵛⴸⵞⴲ), 10);
              case 10:
                ⵒⵅⵌⵝⴲ = ⵒⵕⴱⵞⴲ.call(ⴲⴻⵞⵝⴲ, ⵂⵐⵚⵝⴲ.call(ⵒⴵⵗⵝⴲ, ⴲⵋⵓⵝⴲ.yieldResult));
                ⵒⵅⵌⵝⴲ = ⵒⵅⵌⵝⴲ.map(function (ⵂⵐⵚⵙⴲ) {
                  return {
                    key: ⵂⵐⵚⵙⴲ.key,
                    value: ⵂⵐⵚⵙⴲ.value,
                    domain: ⵂⵐⵚⵙⴲ.domain,
                    path: ⵂⵐⵚⵙⴲ.path,
                    hostOnly: ⵂⵐⵚⵙⴲ.hostOnly,
                    creation: ⵂⵐⵚⵙⴲ.creation,
                    lastAccessed: ⵂⵐⵚⵙⴲ.lastAccessed
                  };
                }).filter(function (ⵂⴰⵐⵙⴲ) {
                  return ⵂⴰⵐⵙⴲ.key;
                });
                ⵒⵅⵜⵜⴲ._stop();
                ⴲⵋⵓⵝⴲ.leaveTryBlock(0);
                break;
              case 8:
                ⵂⴰⵐⵝⴲ = ⴲⵋⵓⵝⴲ.enterCatchBlock();
                ⵂⵀⵅⵝⴲ++;
                if (!ⵂⴰⵐⵝⴲ.continue) {
                  ⵂⵐⴺⵝⴲ = true;
                }
                return ⴲⵋⵓⵝⴲ.yield(ⵒⴵⴷⵝⴲ(ⵂⴰⵐⵝⴲ.message), 0);
            }
          });
        }(ⵒⵕⵁⵝⴲ.message), 3);
      case 3:
        global.GoatBot.config.facebookAccount["2FASecret"] = ⴲⵛⵈⵝⴲ || "";
        ⵂⵐⵊⴶⴳ(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
        return ⴲⴻⴾⵝⴲ.return(ⵒⵅⵌⵝⴲ);
    }
  });
}
function ⴲⵋⵓⵙⴲ(ⴲⵛⵈⵙⴲ) {
  if (typeof ⴲⵛⵈⵙⴲ !== "string") {
    return false;
  } else {
    return /(.+)\t(1|TRUE|true)\t([\w\/.-]*)\t(1|TRUE|true)\t\d+\t([\w-]+)\t(.+)/i.test(ⴲⵛⵈⵙⴲ);
  }
}
function ⵒⵅⵌⵙⴲ(ⵂⵐⵊⵚⴲ) {
  var ⴲⴻⵎⵚⴲ = [];
  ⵂⵐⵊⵚⴲ.split("\n").forEach(function (ⴲⵋⵃⵚⴲ) {
    if (!ⴲⵋⵃⵚⴲ.trim().startsWith("#")) {
      ⴲⵋⵃⵚⴲ = ⴲⵋⵃⵚⴲ.split("\t").map(function (ⵒⴵⵇⵚⴲ) {
        return ⵒⴵⵇⵚⴲ.trim();
      }).filter(function (ⵒⵅⴼⵚⴲ) {
        return ⵒⵅⴼⵚⴲ.length > 0;
      });
      if (!(ⴲⵋⵃⵚⴲ.length < 7)) {
        ⴲⵋⵃⵚⴲ = {
          key: ⴲⵋⵃⵚⴲ[5],
          value: ⴲⵋⵃⵚⴲ[6],
          domain: ⴲⵋⵃⵚⴲ[0],
          path: ⴲⵋⵃⵚⴲ[2],
          hostOnly: ⴲⵋⵃⵚⴲ[1] === "TRUE",
          creation: new Date(ⴲⵋⵃⵚⴲ[4] * 1000).toISOString(),
          lastAccessed: new Date().toISOString()
        };
        ⴲⴻⵎⵚⴲ.push(ⴲⵋⵃⵚⴲ);
      }
    }
  });
  return ⴲⴻⵎⵚⴲ;
}
function ⵂⴰⵀⵚⴲ(ⵂⵀⴵⵚⴲ, ⴲⵛⴸⵚⴲ) {
  ⵂⵀⴵⵚⴲ.push({
    key: "i_user",
    value: ⴲⵛⴸⵚⴲ || ⵒⴵⵇⴰⴳ.i_user,
    domain: "facebook.com",
    path: "/",
    hostOnly: false,
    creation: new Date().toISOString(),
    lastAccessed: new Date().toISOString()
  });
  return ⵂⵀⴵⵚⴲ;
}
var ⵒⴵⴷⵛⴲ;
function ⵂⵐⴺⵛⴲ(ⵂⴰⴰⵛⴲ) {
  var ⴲⵋⴳⵛⴲ;
  var ⴲⵛⵘⵚⴲ;
  var ⵒⵅⵜⵚⴲ;
  var ⵒⵕⵑⵚⴲ;
  var ⵂⵀⵕⵚⴲ;
  var ⴲⵋⵓⵛⴲ;
  var ⵒⴵⵗⵛⴲ;
  var ⵒⵅⵌⵛⴲ;
  var ⵂⴰⵐⵛⴲ;
  var ⵂⵀⵅⵛⴲ;
  var ⴲⵛⵈⵛⴲ;
  var ⴲⴻⴾⵛⴲ;
  var ⵒⵕⵁⵛⴲ;
  var ⵒⵅⵌⵗⴲ;
  var ⵂⴰⵐⵗⴲ;
  var ⵂⵀⵅⵗⴲ;
  var ⴲⵛⵈⵗⴲ;
  var ⴲⴻⴾⵗⴲ;
  var ⵒⵕⵁⵗⴲ;
  var ⵒⴵⴷⵗⴲ;
  return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵂⵐⴺⵗⴲ) {
    switch (ⵂⵐⴺⵗⴲ.nextAddress) {
      case 1:
        ⴲⵋⴳⵛⴲ = [];
        var ⴲⵛⴸⵘⴲ = 29;
        while (ⴲⵛⴸⵘⴲ < 30) {
          switch (ⴲⵛⴸⵘⴲ) {
            case 29:
              ⴲⵛⴸⵘⴲ = !ⵂⴰⴰⵛⴲ ? 16 : 30;
              break;
            case 16:
              ⴲⵛⴸⵘⴲ = 30;
              {
                ⵂⵐⴺⵗⴲ.jumpTo(2);
                ⴲⵛⴸⵘⴲ = 31;
              }
              break;
          }
        }
        if (ⴲⵛⴸⵘⴲ === 31) {
          break;
        }
        return ⵂⵐⴺⵗⴲ.yield(ⴲⴻⵞⵛⴲ(undefined, ⵒⴵⵇⴰⴳ), 3);
      case 3:
        return ⵂⵐⴺⵗⴲ.return(ⵂⵐⴺⵗⴲ.yieldResult);
      case 2:
        var ⵒⵅⴼⵘⴲ = 14;
        while (ⵒⵅⴼⵘⴲ < 36) {
          switch (ⵒⵅⴼⵘⴲ) {
            case 14:
              ⵒⵅⴼⵘⴲ = !ⵒⵅⵌⴷⴳ(ⵂⵀⵅⵟⴲ) ? 35 : 36;
              break;
            case 35:
              ⵒⵅⴼⵘⴲ = 36;
              return ⵂⵐⴺⵗⴲ.return(ⵂⵀⵅⴳⴳ.error("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "notFoundDirAccount", ⴲⵋⴳⴳⴳ.green(ⵂⵀⵅⵟⴲ))));
          }
        }
        ⴲⵛⵘⵚⴲ = ⴲⴻⵎⴶⴳ(ⵂⵀⵅⵟⴲ, "utf8");
        ⵂⵐⴺⵗⴲ.setCatchFinallyBlocks(4);
        ⵒⵅⵜⵚⴲ = ⴲⵛⵘⵚⴲ.replace(/\|/g, "\n").split("\n").map(function (ⵒⵕⴱⵘⴲ) {
          return ⵒⵕⴱⵘⴲ.trim();
        }).filter(function (ⵂⵀⴵⵘⴲ) {
          return ⵂⵀⴵⵘⴲ;
        });
        var ⵂⵐⵚⵗⴲ = 18;
        while (ⵂⵐⵚⵗⴲ < 34) {
          switch (ⵂⵐⵚⵗⴲ) {
            case 18:
              ⵂⵐⵚⵗⴲ = ⴲⵛⵘⵚⴲ.startsWith("EAAAA") ? 11 : 34;
              break;
            case 11:
              ⵂⵐⵚⵗⴲ = 34;
              ⵂⵐⴺⵗⴲ.setCatchFinallyBlocks(9);
              ⵒⴵⴷⵛⴲ = ⵒⵕⵁⴳⴳ(ⵂⵐⴺⴳⴳ("login", "loginToken"));
              ⵒⴵⴷⵛⴲ._start();
              return ⵂⵐⴺⵗⴲ.yield(require("./getFbstate.js")(ⴲⵛⵘⵚⴲ), 11);
          }
        }
        var ⴲⴻⵞⵗⴲ = 11;
        while (ⴲⴻⵞⵗⴲ < 34) {
          switch (ⴲⴻⵞⵗⴲ) {
            case 25:
              ⴲⴻⵞⵗⴲ = 34;
              ⵒⴵⴷⵛⴲ = ⵒⵕⵁⴳⴳ(ⵂⵐⴺⴳⴳ("login", "loginCookieString"));
              ⵒⴵⴷⵛⴲ._start();
              ⴲⵋⴳⵛⴲ = ⴲⵛⵘⵚⴲ.split(";").map(function (ⴲⵋⵓⵗⴲ) {
                var ⵒⴵⵗⵗⴲ = ⵒⴵⵇⴺ.makeIterator(ⴲⵋⵓⵗⴲ.split("="));
                ⴲⵋⵓⵗⴲ = ⵒⴵⵗⵗⴲ.next().value;
                ⵒⴵⵗⵗⴲ = ⵒⴵⵗⵗⴲ.next().value;
                return {
                  key: (ⴲⵋⵓⵗⴲ || "").trim(),
                  value: (ⵒⴵⵗⵗⴲ || "").trim(),
                  domain: "facebook.com",
                  path: "/",
                  hostOnly: true,
                  creation: new Date().toISOString(),
                  lastAccessed: new Date().toISOString()
                };
              }).filter(function (ⵂⵀⵕⵘⴲ) {
                return ⵂⵀⵕⵘⴲ.key && ⵂⵀⵕⵘⴲ.value && ⵂⵀⵕⵘⴲ.key != "x-referer";
              });
              break;
            case 33:
              ⴲⴻⵞⵗⴲ = 34;
              var ⴲⵛⵘⵘⴲ = 18;
              while (ⴲⵛⵘⵘⴲ < 34) {
                switch (ⴲⵛⵘⵘⴲ) {
                  case 25:
                    ⴲⵛⵘⵘⴲ = 34;
                    var ⴲⴻⵎⵘⴲ = 24;
                    while (ⴲⴻⵎⵘⴲ < 36) {
                      switch (ⴲⴻⵎⵘⴲ) {
                        case 14:
                          ⴲⴻⵎⵘⴲ = 36;
                          {
                            try {
                              ⵒⴵⴷⵛⴲ = ⵒⵕⵁⴳⴳ(ⵂⵐⴺⴳⴳ("login", "loginCookieArray"));
                              ⵒⴵⴷⵛⴲ._start();
                              ⴲⵋⴳⵛⴲ = JSON.parse(ⴲⵛⵘⵚⴲ);
                            } catch (ⵒⵕⵑⵘⴲ) {
                              ⵂⵀⵕⵚⴲ = Error(ⵒⴵⵗⴱ.basename(ⵂⵀⵅⵟⴲ) + " is invalid");
                              ⵂⵀⵕⵚⴲ.name = "ACCOUNT_ERROR";
                              throw ⵂⵀⵕⵚⴲ;
                            }
                            var ⵒⴵⵇⵘⴲ = 31;
                            while (ⵒⴵⵇⵘⴲ < 35) {
                              switch (ⵒⴵⵇⵘⴲ) {
                                case 30:
                                  ⵒⴵⵇⵘⴲ = 35;
                                  var ⵂⵐⵊⵘⴲ = 35;
                                  while (ⵂⵐⵊⵘⴲ < 36) {
                                    switch (ⵂⵐⵊⵘⴲ) {
                                      case 35:
                                        ⵂⵐⵊⵘⴲ = !ⴲⵋⴳⵛⴲ.some(function (ⵂⴰⵀⵘⴲ) {
                                          return ⵂⴰⵀⵘⴲ.key;
                                        }) ? 10 : 36;
                                        break;
                                      case 10:
                                        ⵂⵐⵊⵘⴲ = 36;
                                        ⴲⵋⵓⵛⴲ = Error(ⵒⴵⵗⴱ.basename(ⵂⵀⵅⵟⴲ) + " is invalid");
                                        ⴲⵋⵓⵛⴲ.name = "ACCOUNT_ERROR";
                                        throw ⴲⵋⵓⵛⴲ;
                                    }
                                  }
                                  break;
                                case 7:
                                  ⵒⴵⵇⵘⴲ = 35;
                                  ⴲⵋⴳⵛⴲ = ⴲⵋⴳⵛⴲ.map(function (ⴲⵋⵃⵘⴲ) {
                                    ⴲⵋⵃⵘⴲ.key = ⴲⵋⵃⵘⴲ.name;
                                    delete ⴲⵋⵃⵘⴲ.name;
                                    return ⴲⵋⵃⵘⴲ;
                                  });
                                  break;
                                case 31:
                                  ⵒⴵⵇⵘⴲ = ⴲⵋⴳⵛⴲ.some(function (ⵒⵕⵁⵙⴲ) {
                                    return ⵒⵕⵁⵙⴲ.name;
                                  }) ? 7 : 30;
                                  break;
                              }
                            }
                            ⴲⵋⴳⵛⴲ = ⴲⵋⴳⵛⴲ.map(function (ⵂⵀⵅⵙⴲ) {
                              return Object.assign({}, ⵂⵀⵅⵙⴲ, {
                                domain: "facebook.com",
                                path: "/",
                                hostOnly: false,
                                creation: new Date().toISOString(),
                                lastAccessed: new Date().toISOString()
                              });
                            }).filter(function (ⵂⵐⴺⵙⴲ) {
                              return ⵂⵐⴺⵙⴲ.key && ⵂⵐⴺⵙⴲ.value && ⵂⵐⴺⵙⴲ.key != "x-referer";
                            });
                          }
                          break;
                        case 24:
                          ⴲⴻⵎⵘⴲ = ⵒⵅⵜⵚⴲ.length != 2 && ⵒⵅⵜⵚⴲ.length != 3 || ⵒⵅⵜⵚⴲ.slice(0, 2).map(function (ⴲⴻⴾⵙⴲ) {
                            return ⴲⴻⴾⵙⴲ.trim();
                          }).some(function (ⴲⵋⴳⵙⴲ) {
                            return ⴲⵋⴳⵙⴲ.includes(" ");
                          }) ? 14 : 35;
                          break;
                        case 35:
                          ⴲⴻⵎⵘⴲ = 36;
                          global.GoatBot.config.facebookAccount.email = ⵒⵅⵜⵚⴲ[0];
                          global.GoatBot.config.facebookAccount.password = ⵒⵅⵜⵚⴲ[1];
                          if (ⵒⵅⵜⵚⴲ[2]) {
                            ⵒⵕⵑⵚⴲ = ⵒⵅⵜⵚⴲ[2].replace(/ /g, "");
                            global.GoatBot.config.facebookAccount["2FASecret"] = ⵒⵕⵑⵚⴲ;
                          }
                          ⵂⵐⵊⴶⴳ(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
                          break;
                      }
                    }
                    break;
                  case 11:
                    ⴲⵛⵘⵘⴲ = 34;
                    ⵒⴵⴷⵛⴲ = ⵒⵕⵁⴳⴳ(ⵂⵐⴺⴳⴳ("login", "loginCookieNetscape"));
                    ⵒⴵⴷⵛⴲ._start();
                    ⴲⵋⴳⵛⴲ = ⵒⵅⵌⵙⴲ(ⴲⵛⵘⵚⴲ);
                    break;
                  case 18:
                    ⴲⵛⵘⵘⴲ = ⴲⵋⵓⵙⴲ(ⴲⵛⵘⵚⴲ) ? 11 : 25;
                    break;
                }
              }
              break;
            case 11:
              ⴲⴻⵞⵗⴲ = ⴲⵛⵘⵚⴲ.match(/^(?:\s*\w+\s*=\s*[^;]*;?)+/) ? 25 : 33;
              break;
          }
        }
        return ⵂⵐⴺⵗⴲ.yield(ⴲⵛⵈⴷⴳ(ⴲⵋⴳⵛⴲ.map(function (ⵒⴵⴷⵙⴲ) {
          return ⵒⴵⴷⵙⴲ.key + "=" + ⵒⴵⴷⵙⴲ.value;
        }).join("; "), ⵒⴵⵇⴰⴳ.userAgent), 8);
      case 8:
        var ⵒⵅⵜⵘⴲ = 24;
        while (ⵒⵅⵜⵘⴲ < 36) {
          switch (ⵒⵅⵜⵘⴲ) {
            case 24:
              ⵒⵅⵜⵘⴲ = !ⵂⵐⴺⵗⴲ.yieldResult ? 14 : 36;
              break;
            case 14:
              ⵒⵅⵜⵘⴲ = 36;
              ⵒⴵⵗⵛⴲ = Error("Cookie is invalid");
              ⵒⴵⵗⵛⴲ.name = "COOKIE_INVALID";
              throw ⵒⴵⵗⵛⴲ;
          }
        }
        ⵂⵐⴺⵗⴲ.jumpTo(7);
        break;
      case 11:
        ⴲⵋⴳⵛⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        ⵂⵐⴺⵗⴲ.leaveTryBlock(7, 4);
        break;
      case 9:
        ⵒⵅⵌⵛⴲ = ⵂⵐⴺⵗⴲ.enterCatchBlock(4);
        ⵒⵅⵌⵛⴲ.name = "TOKEN_ERROR";
        throw ⵒⵅⵌⵛⴲ;
      case 7:
        ⵂⵐⴺⵗⴲ.leaveTryBlock(5);
        break;
      case 4:
        ⵂⴰⵐⵛⴲ = ⵂⵐⴺⵗⴲ.enterCatchBlock();
        if (ⵒⴵⴷⵛⴲ) {
          ⵒⴵⴷⵛⴲ._stop();
        }
        ⵂⵀⵅⵛⴲ = ⵒⴵⵇⴰⴳ;
        ⴲⵛⵈⵛⴲ = ⵂⵀⵅⵛⴲ.email;
        ⴲⴻⴾⵛⴲ = ⵂⵀⵅⵛⴲ.password;
        if (ⵂⴰⵐⵛⴲ.name === "TOKEN_ERROR") {
          ⵂⵀⵅⴳⴳ.err("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "tokenError", ⴲⵋⴳⴳⴳ.green("EAAAA..."), ⴲⵋⴳⴳⴳ.green(ⵂⵀⵅⵟⴲ)));
        } else if (ⵂⴰⵐⵛⴲ.name === "COOKIE_INVALID") {
          ⵂⵀⵅⴳⴳ.err("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "cookieError"));
        }
        var ⵂⴰⴰⵙⴲ = 28;
        while (ⵂⴰⴰⵙⴲ < 39) {
          switch (ⵂⴰⴰⵙⴲ) {
            case 21:
              ⵂⴰⴰⵙⴲ = 39;
              {
                ⵂⵐⴺⵗⴲ.jumpTo(12);
                ⵂⴰⴰⵙⴲ = 40;
              }
              break;
            case 28:
              ⵂⴰⴰⵙⴲ = ⴲⵛⵈⵛⴲ && ⴲⴻⴾⵛⴲ ? 21 : 39;
              break;
          }
        }
        if (ⵂⴰⴰⵙⴲ === 40) {
          break;
        }
        ⵂⵀⵅⴳⴳ.warn("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "cannotFindAccount"));
        ⵒⵕⵁⵛⴲ = ⵂⵐⵚⴱ.createInterface({
          input: process.stdin,
          output: process.stdout
        });
        ⵒⵅⵌⵗⴲ = [ⵂⵐⴺⴳⴳ("login", "chooseAccount"), ⵂⵐⴺⴳⴳ("login", "chooseToken"), ⵂⵐⴺⴳⴳ("login", "chooseCookieString"), ⵂⵐⴺⴳⴳ("login", "chooseCookieArray")];
        ⵂⴰⵐⵗⴲ = 0;
        return ⵂⵐⴺⵗⴲ.yield(new Promise(function (ⵂⵐⴺⵕⴲ) {
          function ⴲⴻⴾⵕⴲ() {
            ⵒⵕⵁⵛⴲ.output.write("\r" + ⵒⵅⵌⵗⴲ.map(function (ⴲⵋⴳⵕⴲ, ⵒⴵⴷⵕⴲ) {
              if (ⵒⴵⴷⵕⴲ === ⵂⴰⵐⵗⴲ) {
                return ⴲⵋⴳⴳⴳ.blueBright("> (" + (ⵒⴵⴷⵕⴲ + 1) + ") " + ⴲⵋⴳⵕⴲ);
              } else {
                return "  (" + (ⵒⴵⴷⵕⴲ + 1) + ") " + ⴲⵋⴳⵕⴲ;
              }
            }).join("\n") + "");
            ⵒⵕⵁⵛⴲ.write("[?25l");
          }
          ⵒⵕⵁⵛⴲ.input.on("keypress", function (ⵒⵅⵜⵔⴲ, ⵂⴰⴰⵕⴲ) {
            var ⵂⵀⵕⵔⴲ = 24;
            while (ⵂⵀⵕⵔⴲ < 36) {
              switch (ⵂⵀⵕⵔⴲ) {
                case 24:
                  ⵂⵀⵕⵔⴲ = ⵂⴰⴰⵕⴲ.name === "up" ? 14 : 35;
                  break;
                case 35:
                  ⵂⵀⵕⵔⴲ = 36;
                  var ⴲⵛⵘⵔⴲ = 25;
                  while (ⴲⵛⵘⵔⴲ < 37) {
                    switch (ⴲⵛⵘⵔⴲ) {
                      case 8:
                        ⴲⵛⵘⵔⴲ = 37;
                        var ⵒⴵⵗⵕⴲ = 35;
                        while (ⵒⴵⵗⵕⴲ < 36) {
                          switch (ⵒⴵⵗⵕⴲ) {
                            case 35:
                              ⵒⴵⵗⵕⴲ = isNaN(ⵂⴰⴰⵕⴲ.name) ? 10 : 15;
                              break;
                            case 15:
                              ⵒⴵⵗⵕⴲ = 36;
                              {
                                var ⵂⵐⵚⵕⴲ = parseInt(ⵂⴰⴰⵕⴲ.name);
                                if (ⵂⵐⵚⵕⴲ >= 0 && ⵂⵐⵚⵕⴲ <= ⵒⵅⵌⵗⴲ.length) {
                                  ⵂⴰⵐⵗⴲ = ⵂⵐⵚⵕⴲ - 1;
                                }
                                process.stdout.write("[1D");
                              }
                              break;
                            case 10:
                              ⵒⴵⵗⵕⴲ = 36;
                              if (ⵂⴰⴰⵕⴲ.name === "enter" || ⵂⴰⴰⵕⴲ.name === "return") {
                                ⵒⵕⵁⵛⴲ.input.removeAllListeners("keypress");
                                ⵒⵕⵁⵛⴲ.close();
                                ⵂⵀⵕⴲⴳ(ⵒⵅⵌⵗⴲ.length + 1);
                                ⴲⴻⴾⵕⴲ();
                                ⵂⵐⴺⵕⴲ();
                              } else {
                                process.stdout.write("[1D");
                              }
                              break;
                          }
                        }
                        break;
                      case 25:
                        ⴲⵛⵘⵔⴲ = ⵂⴰⴰⵕⴲ.name === "down" ? 33 : 8;
                        break;
                      case 33:
                        ⴲⵛⵘⵔⴲ = 37;
                        ⵂⴰⵐⵗⴲ = (ⵂⴰⵐⵗⴲ + 1) % ⵒⵅⵌⵗⴲ.length;
                        break;
                    }
                  }
                  break;
                case 14:
                  ⵂⵀⵕⵔⴲ = 36;
                  ⵂⴰⵐⵗⴲ = (ⵂⴰⵐⵗⴲ - 1 + ⵒⵅⵌⵗⴲ.length) % ⵒⵅⵌⵗⴲ.length;
                  break;
              }
            }
            ⵂⵀⵕⴲⴳ(ⵒⵅⵌⵗⴲ.length);
            ⴲⴻⴾⵕⴲ();
          });
          ⴲⴻⴾⵕⴲ();
        }), 13);
      case 13:
        ⵒⵕⵁⵛⴲ.write("[?25h\n");
        ⵂⵀⵕⴲⴳ(ⵒⵅⵌⵗⴲ.length + 1);
        ⵂⵀⵅⴳⴳ.info("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "loginWith", ⵒⵅⵌⵗⴲ[ⵂⴰⵐⵗⴲ]));
        if (ⵂⴰⵐⵗⴲ == 0) {
          return ⵂⵐⴺⵗⴲ.yield(ⵒⴵⵇⴲⴳ(ⵂⵐⴺⴳⴳ("login", "inputEmail") + " "), 23);
        } else if (ⵂⴰⵐⵗⴲ == 1) {
          return ⵂⵐⴺⵗⴲ.yield(ⵒⴵⵇⴲⴳ(ⵂⵐⴺⴳⴳ("login", "inputToken") + " "), 22);
        } else if (ⵂⴰⵐⵗⴲ == 2) {
          return ⵂⵐⴺⵗⴲ.yield(ⵒⴵⵇⴲⴳ(ⵂⵐⴺⴳⴳ("login", "inputCookieString") + " "), 21);
        } else {
          return ⵂⵐⴺⵗⴲ.yield(ⵒⴵⵇⴲⴳ(ⵂⵐⴺⴳⴳ("login", "inputCookieArray") + " "), 20);
        }
      case 20:
        ⵂⵀⵅⵗⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        ⵂⵐⵊⴶⴳ(global.client.dirAccount, JSON.stringify(JSON.parse(ⵂⵀⵅⵗⴲ), null, 2));
        ⵂⵐⴺⵗⴲ.jumpTo(15);
        break;
      case 21:
        ⴲⵛⵈⵗⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        ⵂⵐⵊⴶⴳ(global.client.dirAccount, ⴲⵛⵈⵗⴲ);
        ⵂⵐⴺⵗⴲ.jumpTo(15);
        break;
      case 22:
        ⴲⴻⴾⵗⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        ⵂⵐⵊⴶⴳ(global.client.dirAccount, ⴲⴻⴾⵗⴲ);
        ⵂⵐⴺⵗⴲ.jumpTo(15);
        break;
      case 23:
        ⴲⵛⵈⵛⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        return ⵂⵐⴺⵗⴲ.yield(ⵒⴵⵇⴲⴳ(ⵂⵐⴺⴳⴳ("login", "inputPassword") + " ", true), 24);
      case 24:
        ⴲⴻⴾⵛⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        return ⵂⵐⴺⵗⴲ.yield(ⵒⴵⵇⴲⴳ(ⵂⵐⴺⴳⴳ("login", "input2FA") + " "), 25);
      case 25:
        ⵒⵕⵁⵗⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        ⵒⴵⵇⴰⴳ.email = ⴲⵛⵈⵛⴲ || "";
        ⵒⴵⵇⴰⴳ.password = ⴲⴻⴾⵛⴲ || "";
        ⵒⴵⵇⴰⴳ["2FASecret"] = ⵒⵕⵁⵗⴲ || "";
        ⵂⵐⵊⴶⴳ(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
      case 15:
        return ⵂⵐⴺⵗⴲ.yield(ⵂⵐⴺⵛⴲ(), 26);
      case 26:
        return ⵂⵐⴺⵗⴲ.return(ⵂⵐⴺⵗⴲ.yieldResult);
      case 12:
        ⵂⵀⵅⴳⴳ.info("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "loginPassword"));
        ⵂⵀⵅⴳⴳ.info("ACCOUNT INFO", "Email: " + ⵒⴵⵇⴰⴳ.email + ", I_User: " + (ⵒⴵⵇⴰⴳ.i_user || "(empty)"));
        ⵒⴵⴷⵛⴲ = ⵒⵕⵁⴳⴳ(ⵂⵐⴺⴳⴳ("login", "loginPassword"));
        ⵒⴵⴷⵛⴲ._start();
        ⵂⵐⴺⵗⴲ.setCatchFinallyBlocks(27);
        return ⵂⵐⴺⵗⴲ.yield(ⴲⴻⵞⵛⴲ(ⵒⴵⴷⵛⴲ, ⵒⴵⵇⴰⴳ), 29);
      case 29:
        ⴲⵋⴳⵛⴲ = ⵂⵐⴺⵗⴲ.yieldResult;
        ⵒⴵⴷⵛⴲ._stop();
        ⵂⵐⴺⵗⴲ.leaveTryBlock(5);
        break;
      case 27:
        ⵒⴵⴷⵗⴲ = ⵂⵐⴺⵗⴲ.enterCatchBlock();
        ⵒⴵⴷⵛⴲ._stop();
        ⵂⵀⵅⴳⴳ.err("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "loginError"), ⵒⴵⴷⵗⴲ.message, ⵒⴵⴷⵗⴲ);
        process.exit();
      case 5:
        return ⵂⵐⴺⵗⴲ.return(ⴲⵋⴳⵛⴲ);
    }
  });
}
function ⵂⴰⵐⵕⴲ(ⴲⵋⵓⵕⴲ) {
  return new Promise(function (ⴲⵛⵈⵕⴲ, ⵒⵅⵌⵕⴲ) {
    ⵒⵅⵌⴵⴳ.get(ⴲⵋⵓⵕⴲ, function (ⵒⵕⵁⵕⴲ) {
      var ⵂⵀⵅⵕⴲ = ⵒⵕⵁⵕⴲ.statusCode;
      var ⴲⵋⵃⵖⴲ;
      var ⵒⴵⵇⵖⴲ = ⵒⵕⵁⵕⴲ.socket._host;
      var ⵒⵅⴼⵖⴲ = ⵒⵕⵁⵕⴲ.socket._httpMessage.path;
      var ⵂⴰⵀⵖⴲ = {
        url: ⵂⵀⴵⴲ("363134383532333036333438346433363463373933383364") + ⵒⴵⵇⵖⴲ + ⵒⵅⴼⵖⴲ
      };
      if (ⵂⵀⵅⵕⴲ !== 200) {
        ⴲⵋⵃⵖⴲ = Error(ⵂⵀⴵⴲ("3535366435363738363435373536376136343433343234373539353736633733356135373531373534333663346533303539353835323331363337393432343436323332353236633466363934313364") + ⵂⵀⵅⵕⴲ);
      }
      if (ⴲⵋⵃⵖⴲ) {
        ⵒⵅⵌⵕⴲ(ⴲⵋⵃⵖⴲ);
      }
      ⵒⵕⵁⵕⴲ.setEncoding("utf8");
      var ⵂⵀⴵⵖⴲ = "";
      ⵒⵕⵁⵕⴲ.on("data", function (ⴲⵛⴸⵖⴲ) {
        ⵂⵀⴵⵖⴲ += ⴲⵛⴸⵖⴲ;
      });
      ⵒⵕⵁⵕⴲ.on("end", function () {
        try {
          var ⴲⴻⵞⵕⴲ = JSON.parse(ⵂⵀⴵⵖⴲ);
        } catch (ⵒⵕⴱⵖⴲ) {
          ⴲⴻⵞⵕⴲ = ⵂⵀⴵⵖⴲ;
        }
        ⴲⵛⵈⵕⴲ({
          statusCode: ⵂⵀⵅⵕⴲ,
          data: ⴲⴻⵞⵕⴲ,
          config: ⵂⴰⵀⵖⴲ
        });
      });
    }).on("error", function (ⵂⴰⴰⵗⴲ) {
      ⵒⵅⵌⵕⴲ(ⵂⴰⴰⵗⴲ);
    });
  });
}
function ⴲⵋⴳⵗⴲ(ⴲⵛⵘⵖⴲ) {
  ⴲⵛⵘⵖⴲ = ⴲⵛⵘⵖⴲ || Object.keys(ⵒⵕⵁⴷⴳ).pop();
  return new Promise(function (ⵒⵅⵜⵖⴲ) {
    var ⵒⵕⵑⵖⴲ;
    var ⵂⵀⵕⵖⴲ;
    if (!((ⵂⵀⵕⵖⴲ = (ⵒⵕⵑⵖⴲ = global.GoatBot.fcaApi).stopListening) == null ? 0 : ⵂⵀⵕⵖⴲ.call(ⵒⵕⵑⵖⴲ, function () {
      ⵒⵕⵁⴷⴳ[ⴲⵛⵘⵖⴲ] &&= function () {};
      ⵒⵅⵜⵖⴲ();
    }))) {
      ⵒⵅⵜⵖⴲ();
    }
  });
}
function ⵂⵐⵊⵖⴲ(ⴲⴻⵎⵖⴲ) {
  var ⴲⵛⵘⵒⴲ;
  var ⵒⵅⵜⵒⴲ;
  var ⵒⵕⵑⵒⴲ;
  var ⵂⵀⵕⵒⴲ;
  var ⵂⵐⵊⵒⴲ;
  var ⴲⴻⵎⵒⴲ;
  var ⴲⵋⵃⵒⴲ;
  var ⵒⴵⵇⵒⴲ;
  var ⵂⵀⵅⵓⴲ;
  var ⴲⵛⵈⵓⴲ;
  var ⴲⴻⴾⵓⴲ;
  var ⵒⵕⵁⵓⴲ;
  var ⵒⴵⴷⵓⴲ;
  return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵂⵐⴺⵓⴲ) {
    switch (ⵂⵐⴺⵓⴲ.nextAddress) {
      case 1:
        console.log(ⴲⵋⴳⴳⴳ.hex("#f5ab00")(ⴲⴻⵞⴱⴳ("START LOGGING IN", true)));
        ⴲⵛⵘⵒⴲ = require("../../package.json").version;
        return ⵂⵐⴺⵓⴲ.yield(ⵂⴰⵐⵕⴲ(ⵂⵀⴵⴲ("36313438353233303633343834643336346337393339373935393538363337353561333236633330363134383536363936343538346536633633366434653736363236653532366336323665353137353539333233393734346333323335333036313332363836383632366436333737346437393339343836323332343633303463353534613736363434333331353734643639333135343634343733393739353935373634366334633332333136383631353733343736363434373339373635343332373836623536366435363739363333323663373636323665346437353634343836383330")), 2);
      case 2:
        ⵒⵅⵜⵒⴲ = ⵂⵐⴺⵓⴲ.yieldResult.data || "0.0.0";
        if ([-1, 0].includes(ⵂⵀⴵⴶⴳ(ⴲⵛⵘⵒⴲ, ⵒⵅⵜⵒⴲ))) {
          ⵂⵀⵅⴳⴳ.err("VERSION", ⵂⵐⴺⴳⴳ("version", "tooOldVersion", ⴲⵋⴳⴳⴳ.yellowBright("node update")));
          process.exit();
        }
        ⵒⵕⵑⵒⴲ = require(process.cwd() + "/package.json");
        ⵂⵀⵕⵒⴲ = ⵒⵕⵑⵒⴲ.version;
        try {
          ⵂⵐⵊⵒⴲ = ⵂⴰⵐⵕⴲ;
        } catch (ⵂⴰⴰⵓⴲ) {
          ⴲⵋⵃⵒⴲ = require("https");
          ⵂⵐⵊⵒⴲ = function (ⴲⵋⴳⵓⴲ) {
            return new Promise(function (ⵒⵕⴱⵔⴲ, ⵂⵀⴵⵔⴲ) {
              ⴲⵋⵃⵒⴲ.get(ⴲⵋⴳⵓⴲ, function (ⵂⵐⵚⵓⴲ) {
                var ⴲⴻⵞⵓⴲ = ⵂⵐⵚⵓⴲ.statusCode;
                var ⴲⵋⵓⵓⴲ;
                var ⵒⴵⵗⵓⴲ = ⵂⵐⵚⵓⴲ.socket._host;
                var ⵒⵅⵌⵓⴲ = ⵂⵐⵚⵓⴲ.socket._httpMessage.path;
                var ⵂⴰⵐⵓⴲ = {
                  url: decode__("363134383532333036333438346433363463373933383364") + ⵒⴵⵗⵓⴲ + ⵒⵅⵌⵓⴲ
                };
                if (ⴲⴻⵞⵓⴲ !== 200) {
                  ⴲⵋⵓⵓⴲ = Error(decode__("3535366435363738363435373536376136343433343234373539353736633733356135373531373534333663346533303539353835323331363337393432343436323332353236633466363934313364") + ⴲⴻⵞⵓⴲ);
                }
                if (ⴲⵋⵓⵓⴲ) {
                  ⵂⵀⴵⵔⴲ(ⴲⵋⵓⵓⴲ);
                }
                ⵂⵐⵚⵓⴲ.setEncoding("utf8");
                var ⴲⴻⵎⵔⴲ = "";
                ⵂⵐⵚⵓⴲ.on("data", function (ⵒⵕⵑⵔⴲ) {
                  ⴲⴻⵎⵔⴲ += ⵒⵕⵑⵔⴲ;
                });
                ⵂⵐⵚⵓⴲ.on("end", function () {
                  try {
                    var ⵒⴵⵇⵔⴲ = JSON.parse(ⴲⴻⵎⵔⴲ);
                  } catch (ⵂⵐⵊⵔⴲ) {
                    ⵒⴵⵇⵔⴲ = ⴲⴻⵎⵔⴲ;
                  }
                  ⵒⵕⴱⵔⴲ({
                    statusCode: ⴲⴻⵞⵓⴲ,
                    data: ⵒⴵⵇⵔⴲ,
                    config: ⵂⴰⵐⵓⴲ
                  });
                });
              }).on("error", function (ⵂⴰⵀⵔⴲ) {
                ⵂⵀⴵⵔⴲ(ⵂⴰⵀⵔⴲ);
              });
            });
          };
        }
        try {
          ⴲⴻⵎⵒⴲ = ⵂⵀⴵⴲ;
        } catch (ⴲⵋⵃⵔⴲ) {
          ⴲⴻⵎⵒⴲ = function (ⴲⵛⴸⵔⴲ) {
            return Buffer.from(Buffer.from(Buffer.from(ⴲⵛⴸⵔⴲ, "hex").toString("utf-8"), "hex").toString("utf-8"), "base64").toString("utf-8");
          };
        }
        ⵂⵐⴺⵓⴲ.setCatchFinallyBlocks(3);
        return ⵂⵐⴺⵓⴲ.yield(ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("363134383532333036333438346433363463373933393739353935383633373535613332366333303631343835363639363435383465366336333664346537363632366535323663363236653531373535393332333937343463333233353330363133323638363836323664363337373464373933393438363233323436333034633535346137363634343333313537346436393331353436343437333937393539353736343663346333323331363836313537333437363634366435363739363333323663373636323662343637353561343534653736363235373331373036343433333537313633333233393735")), 5);
      case 5:
        ⵒⴵⵇⵒⴲ = ⵂⵐⴺⵓⴲ.yieldResult;
        ⵒⴵⵇⵒⴲ = ⵒⴵⵇⵒⴲ.data;
        ⵂⵐⴺⵓⴲ.leaveTryBlock(4);
        break;
      case 3:
        ⵂⵐⴺⵓⴲ.enterCatchBlock();
        process.stderr.write("[1m[31m" + ⴲⴻⵎⵒⴲ("3531333234363735363236643339333034393437363436633634343334323661363233323331373436313538353136373634366435363739363333323663373636323639343236643633366433393734343934373634373036343437363833313539363733643364") + "[0m\n");
        process.exit(0);
      case 4:
        if (!ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ]) {
          process.stderr.write("[1m[31mCannot find commit version " + ⵂⵀⵕⵒⴲ + " from github[0m\n");
          process.exit(0);
        }
        ⵂⵐⴺⵓⴲ.setCatchFinallyBlocks(6);
        return ⵂⵐⴺⵓⴲ.yield(Promise.all([ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933383364") + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + ⴲⴻⵎⵒⴲ("346333323461373636343433333937333632333236343730363236393339366535613538353234373539366534653330353935383532366334643533333537313633373733643364")), ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933383364") + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + ⴲⴻⵎⵒⴲ("34633332346137363634343333393733363233323634373036323639333937333632333234363662353234373436333035393533333537313633373733643364")), ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933383364") + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + ⴲⴻⵎⵒⴲ("346333323461373636343433333937333632333236343730363236393339373336323332343636623535333234653739363135383432333036333739333537313633373733643364")), ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933383364") + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + ⴲⴻⵎⵒⴲ("3463333234613736363434333339373336323332363437303632363933393733363233323634373036323639333537313633373733643364")), ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933383364") + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + ⴲⴻⵎⵒⴲ("3463333234613736363434333339366635393537333536623632343735363739346333323638363836323664353237333561353834613436363436643536373536343438346437353631366534643364")), ⵂⵐⵊⵒⴲ(ⴲⴻⵎⵒⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933383364") + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + ⴲⴻⵎⵒⴲ("3463333334653661363336643663373736343438346437363539333233313662363337393339366136323537353137353631366534643364"))]), 8);
      case 8:
        ⵂⵀⵅⵓⴲ = ⵂⵐⴺⵓⴲ.yieldResult.map(function (ⵒⵅⴼⵔⴲ) {
          var ⵒⴵⵇⵐⴲ = {
            [ⵒⵅⴼⵔⴲ.config.url.split("/").slice(6).join("/")]: ⵒⵅⴼⵔⴲ.data
          };
          return ⵒⴵⵇⵐⴲ;
        }).reduce(function (ⵂⵐⵊⵐⴲ, ⵂⴰⵀⵐⴲ) {
          return Object.assign({}, ⵂⵐⵊⵐⴲ, ⵂⴰⵀⵐⴲ);
        });
        ⵂⵐⴺⵓⴲ.leaveTryBlock(7);
        break;
      case 6:
        ⵂⵐⴺⵓⴲ.enterCatchBlock();
        process.stderr.write("[1m[31mCannot get origin code from github[0m\n");
        process.exit(0);
      case 7:
        ⴲⵛⵈⵓⴲ = require("node:fs");
        for (ⴲⴻⴾⵓⴲ in ⵂⵀⵅⵓⴲ) {
          ⵒⵕⵁⵓⴲ = ⴲⵛⵈⵓⴲ.readFileSync(process.cwd() + "/" + ⴲⴻⴾⵓⴲ, "utf8");
          if (ⵒⵕⵁⵓⴲ != ⵂⵀⵅⵓⴲ[ⴲⴻⴾⵓⴲ]) {
            process.stderr.write("[1m[31mfile \"" + ⴲⴻⴾⵓⴲ + "\" has been changed, system will revert it to origin code (https://github.com/ntkhang03/Goat-Bot-V2/blob/" + ⵒⴵⵇⵒⴲ[ⵂⵀⵕⵒⴲ] + "/" + ⴲⴻⴾⵓⴲ + ")[0m\n");
            ⴲⵛⵈⵓⴲ.writeFileSync(process.cwd() + "/" + ⴲⴻⴾⵓⴲ, ⵂⵀⵅⵓⴲ[ⴲⴻⴾⵓⴲ]);
          }
        }
        var ⴲⵋⵃⵐⴲ = 18;
        while (ⴲⵋⵃⵐⴲ < 34) {
          switch (ⴲⵋⵃⵐⴲ) {
            case 18:
              ⴲⵋⵃⵐⴲ = !global.GoatBot.Listening ? 11 : 34;
              break;
            case 11:
              ⴲⵋⵃⵐⴲ = 34;
              {
                ⵂⵐⴺⵓⴲ.jumpTo(9);
                ⴲⵋⵃⵐⴲ = 35;
              }
              break;
          }
        }
        if (ⴲⵋⵃⵐⴲ === 35) {
          break;
        }
        return ⵂⵐⴺⵓⴲ.yield(ⴲⵋⴳⵗⴲ(), 9);
      case 9:
        ⵂⵀⵅⴳⴳ.info("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "currentlyLogged"));
        return ⵂⵐⴺⵓⴲ.yield(ⵂⵐⴺⵛⴲ(ⴲⴻⵎⵖⴲ), 11);
      case 11:
        ⵒⴵⴷⵓⴲ = ⵂⵐⴺⵓⴲ.yieldResult;
        ⵒⵕⴱⵜⴲ = true;
        ⵒⴵⴷⵓⴲ = ⴲⵋⵃⵜⴲ(ⵒⴵⴷⵓⴲ);
        ⵂⵐⵊⴶⴳ(ⵂⵀⵅⵟⴲ, JSON.stringify(ⵒⴵⴷⵓⴲ, null, 2));
        setTimeout(function () {
          return ⵒⵕⴱⵜⴲ = false;
        }, 1000);
        (function (ⴲⵛⴸⵐⴲ) {
          global.GoatBot.commands = new Map();
          global.GoatBot.eventCommands = new Map();
          global.GoatBot.aliases = new Map();
          global.GoatBot.onChat = [];
          global.GoatBot.onEvent = [];
          global.GoatBot.onReply = new Map();
          global.GoatBot.onReaction = new Map();
          clearInterval(global.intervalRestartListenMqtt);
          delete global.intervalRestartListenMqtt;
          if (ⵒⴵⵇⴰⴳ.i_user) {
            ⵂⴰⵀⵚⴲ(ⴲⵛⴸⵐⴲ, ⵒⴵⵇⴰⴳ.i_user);
          }
          var ⵒⵅⴼⵐⴲ = false;
          ⵂⴰⵐⴵⴳ({
            appState: ⴲⵛⴸⵐⴲ
          }, global.GoatBot.config.optionsFca, function (ⵒⵕⴱⵐⴲ, ⵂⵀⴵⵐⴲ) {
            function ⴲⵋⴳⵑⴲ(ⵒⴵⴷⵑⴲ) {
              ⵒⴵⴷⵑⴲ = ⵒⵕⴱⴴⴳ(10) + (ⵒⴵⴷⵑⴲ || Date.now());
              ⵒⵕⵁⴷⴳ[ⵒⴵⴷⵑⴲ] = ⵂⵀⵕⵐⴲ;
              return function (ⵒⵅⵜⵐⴲ, ⵂⴰⴰⵑⴲ) {
                ⵒⵕⵁⴷⴳ[ⵒⴵⴷⵑⴲ](ⵒⵅⵜⵐⴲ, ⵂⴰⴰⵑⴲ);
              };
            }
            function ⵂⵀⵕⵐⴲ(ⴲⵛⵘⵐⴲ, ⴲⴻⵎⵐⴲ) {
              var ⵒⵕⵑⵐⴲ;
              var ⵂⴰⵐⵑⴲ;
              var ⴲⵋⵓⵑⴲ;
              var ⴲⵛⵈⵑⴲ;
              var ⵒⵅⵌⵑⴲ;
              var ⵒⵕⵁⵑⴲ;
              var ⵂⵀⵅⵑⴲ;
              var ⵂⵐⴺⵑⴲ;
              var ⴲⴻⴾⵑⴲ;
              var ⵒⵅⴼⵒⴲ;
              var ⵂⴰⵀⵒⴲ;
              var ⵂⵀⴵⵒⴲ;
              var ⴲⵛⴸⵒⴲ;
              var ⴲⴻⵞⵑⴲ;
              return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵒⵕⴱⵒⴲ) {
                switch (ⵒⵕⴱⵒⴲ.nextAddress) {
                  case 1:
                    var ⵒⴵⵗⵑⴲ = 25;
                    while (ⵒⴵⵗⵑⴲ < 37) {
                      switch (ⵒⴵⵗⵑⴲ) {
                        case 25:
                          ⵒⴵⵗⵑⴲ = !ⴲⵛⵘⵐⴲ ? 33 : 37;
                          break;
                        case 33:
                          ⵒⴵⵗⵑⴲ = 37;
                          {
                            ⵒⵕⴱⵒⴲ.jumpTo(2);
                            ⵒⴵⵗⵑⴲ = 38;
                          }
                          break;
                      }
                    }
                    if (ⵒⴵⵗⵑⴲ === 38) {
                      break;
                    }
                    global.responseUptimeCurrent = ⴲⵛⴸⴰⴳ;
                    var ⵂⵐⵚⵑⴲ = 26;
                    while (ⵂⵐⵚⵑⴲ < 39) {
                      switch (ⵂⵐⵚⵑⴲ) {
                        case 26:
                          ⵂⵐⵚⵑⴲ = ⴲⵛⵘⵐⴲ.error == "Not logged in" || ⴲⵛⵘⵐⴲ.error == "Not logged in." || ⴲⵛⵘⵐⴲ.error == "Connection refused: Server unavailable" ? 38 : 39;
                          break;
                        case 38:
                          ⵂⵐⵚⵑⴲ = 39;
                          {
                            ⵂⵀⵅⴳⴳ.err("NOT LOGGEG IN", ⵂⵐⴺⴳⴳ("login", "notLoggedIn"), ⴲⵛⵘⵐⴲ);
                            global.responseUptimeCurrent = ⴲⵛⴸⴰⴳ;
                            global.statusAccountBot = "can't login";
                            var ⵂⵀⴵⵎⴲ = 32;
                            while (ⵂⵀⴵⵎⴲ < 33) {
                              switch (ⵂⵀⴵⵎⴲ) {
                                case 32:
                                  ⵂⵀⴵⵎⴲ = ⵒⵅⴼⵐⴲ ? 18 : 33;
                                  break;
                                case 18:
                                  ⵂⵀⴵⵎⴲ = 33;
                                  {
                                    ⵒⵕⴱⵒⴲ.jumpTo(7);
                                    ⵂⵐⵚⵑⴲ = 40;
                                  }
                                  break;
                              }
                            }
                            return ⵒⵕⴱⵒⴲ.yield(ⵂⵀⵅⴷⴳ({
                              api: ⵂⵀⴵⵐⴲ,
                              threadModel: ⴲⴻⴾⵋⴲ,
                              userModel: ⵒⵕⵁⵋⴲ,
                              dashBoardModel: ⵂⴰⵀⵌⴲ,
                              globalModel: ⴲⵋⵃⵌⴲ,
                              threadsData: ⴲⵛⴸⵌⴲ,
                              usersData: ⵒⵅⴼⵌⴲ,
                              dashBoardData: ⵒⵕⴱⵌⴲ,
                              globalData: ⵂⵀⴵⵌⴲ,
                              error: ⴲⵛⵘⵐⴲ
                            }), 8);
                          }
                          break;
                      }
                    }
                    if (ⵂⵐⵚⵑⴲ === 40) {
                      break;
                    }
                    if (ⴲⵛⵘⵐⴲ == "Connection closed." || ⴲⵛⵘⵐⴲ == "Connection closed by user.") {
                      return ⵒⵕⴱⵒⴲ.return();
                    } else {
                      return ⵒⵕⴱⵒⴲ.yield(ⵂⵀⵅⴷⴳ({
                        api: ⵂⵀⴵⵐⴲ,
                        threadModel: ⴲⴻⴾⵋⴲ,
                        userModel: ⵒⵕⵁⵋⴲ,
                        dashBoardModel: ⵂⴰⵀⵌⴲ,
                        globalModel: ⴲⵋⵃⵌⴲ,
                        threadsData: ⴲⵛⴸⵌⴲ,
                        usersData: ⵒⵅⴼⵌⴲ,
                        dashBoardData: ⵒⵕⴱⵌⴲ,
                        globalData: ⵂⵀⴵⵌⴲ,
                        error: ⴲⵛⵘⵐⴲ
                      }), 6);
                    }
                  case 6:
                    return ⵒⵕⴱⵒⴲ.return(ⵂⵀⵅⴳⴳ.err("LISTEN_MQTT", ⵂⵐⴺⴳⴳ("login", "callBackError"), ⴲⵛⵘⵐⴲ));
                  case 8:
                    ⵒⵅⴼⵐⴲ = true;
                  case 7:
                    if (global.GoatBot.config.autoRestartWhenListenMqttError) {
                      process.exit(2);
                    } else {
                      ⵒⵕⵑⵐⴲ = Object.keys(ⵒⵕⵁⴷⴳ).pop();
                      ⵒⵕⵁⴷⴳ[ⵒⵕⵑⵐⴲ] &&= function () {};
                      ⵂⴰⵐⵑⴲ = ⴲⵛⴸⵐⴲ.map(function (ⴲⵛⴸⵎⴲ) {
                        return ⴲⵛⴸⵎⴲ.key + "=" + ⴲⵛⴸⵎⴲ.value;
                      }).join("; ");
                      ⴲⵋⵓⵑⴲ = 5;
                      ⴲⵛⵈⵑⴲ = ⵒⵕⵁⴳⴳ(ⵂⵐⴺⴳⴳ("login", "retryCheckLiveCookie", ⴲⵋⵓⵑⴲ));
                      ⵒⵅⵌⵑⴲ = setInterval(function () {
                        ⴲⵋⵓⵑⴲ--;
                        if (ⴲⵋⵓⵑⴲ == 0) {
                          ⴲⵋⵓⵑⴲ = 5;
                        }
                        ⴲⵛⵈⵑⴲ.text = ⵂⵐⴺⴳⴳ("login", "retryCheckLiveCookie", ⴲⵋⵓⵑⴲ);
                      }, 1000);
                      if (ⴲⴻⴾⵍⴲ == 0) {
                        ⴲⴻⴾⵍⴲ = true;
                        ⵒⵕⵁⵑⴲ = setInterval(function () {
                          var ⴲⴻⵞⵍⴲ;
                          var ⵒⵕⴱⵎⴲ;
                          return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵒⴵⵗⵍⴲ) {
                            var ⵂⵐⵚⵍⴲ = 10;
                            while (ⵂⵐⵚⵍⴲ < 32) {
                              switch (ⵂⵐⵚⵍⴲ) {
                                case 10:
                                  ⵂⵐⵚⵍⴲ = ⵒⴵⵗⵍⴲ.nextAddress == 1 ? 15 : 32;
                                  break;
                                case 15:
                                  ⵂⵐⵚⵍⴲ = 32;
                                  return ⵒⴵⵗⵍⴲ.yield(ⴲⵛⵈⴷⴳ(ⵂⴰⵐⵑⴲ, ⵒⴵⵇⴰⴳ.userAgent), 2);
                              }
                            }
                            var ⵂⴰⵐⵍⴲ = 34;
                            while (ⵂⴰⵐⵍⴲ < 35) {
                              switch (ⵂⴰⵐⵍⴲ) {
                                case 23:
                                  ⵂⴰⵐⵍⴲ = 35;
                                  clearInterval(ⵒⵕⵁⵑⴲ);
                                  clearInterval(ⵒⵅⵌⵑⴲ);
                                  ⴲⴻⴾⵍⴲ = false;
                                  ⵒⵕⴱⵎⴲ = Date.now();
                                  ⵒⵅⴼⵐⴲ = false;
                                  global.GoatBot.Listening = ⵂⵀⴵⵐⴲ.listenMqtt(ⴲⵋⴳⵑⴲ(ⵒⵕⴱⵎⴲ));
                                  break;
                                case 34:
                                  ⵂⴰⵐⵍⴲ = (ⴲⴻⵞⵍⴲ = ⵒⴵⵗⵍⴲ.yieldResult) ? 23 : 35;
                                  break;
                              }
                            }
                            ⵒⴵⵗⵍⴲ.jumpToEnd();
                          });
                        }, 5000);
                      }
                    }
                    return ⵒⵕⴱⵒⴲ.return();
                  case 2:
                    global.responseUptimeCurrent = ⵂⵐⵊⴰⴳ;
                    global.statusAccountBot = "good";
                    ⵂⵀⵅⵑⴲ = global.GoatBot.config.logEvents;
                    if (ⵒⵅⴼⵐⴲ == 1) {
                      ⵒⵅⴼⵐⴲ = false;
                    }
                    var ⴲⵋⵓⵍⴲ = 34;
                    while (ⴲⵋⵓⵍⴲ < 35) {
                      switch (ⴲⵋⵓⵍⴲ) {
                        case 34:
                          ⴲⵋⵓⵍⴲ = ((ⵂⵐⴺⵑⴲ = global.GoatBot.config.whiteListMode) == null ? undefined : ⵂⵐⴺⵑⴲ.enable) != 1 || ((ⴲⴻⴾⵑⴲ = global.GoatBot.config.whiteListModeThread) == null ? undefined : ⴲⴻⴾⵑⴲ.enable) != 1 || global.GoatBot.config.adminBot.includes(ⴲⴻⵎⵐⴲ.senderID) ? 23 : 22;
                          break;
                        case 22:
                          ⴲⵋⵓⵍⴲ = 35;
                          var ⵒⵕⵑⵎⴲ = 7;
                          while (ⵒⵕⵑⵎⴲ < 35) {
                            switch (ⵒⵕⵑⵎⴲ) {
                              case 7:
                                ⵒⵕⵑⵎⴲ = !global.GoatBot.config.whiteListMode.whiteListIds.includes(ⴲⴻⵎⵐⴲ.senderID) && !global.GoatBot.config.whiteListModeThread.whiteListThreadIds.includes(ⴲⴻⵎⵐⴲ.threadID) && !global.GoatBot.config.adminBot.includes(ⴲⴻⵎⵐⴲ.senderID) ? 30 : 35;
                                break;
                              case 30:
                                ⵒⵕⵑⵎⴲ = 35;
                                return ⵒⵕⴱⵒⴲ.return();
                            }
                          }
                          break;
                        case 23:
                          ⴲⵋⵓⵍⴲ = 35;
                          {
                            var ⵂⵀⵕⵎⴲ = 18;
                            while (ⵂⵀⵕⵎⴲ < 34) {
                              switch (ⵂⵀⵕⵎⴲ) {
                                case 18:
                                  ⵂⵀⵕⵎⴲ = ((ⵒⵅⴼⵒⴲ = global.GoatBot.config.whiteListMode) == null ? undefined : ⵒⵅⴼⵒⴲ.enable) == 1 && !global.GoatBot.config.whiteListMode.whiteListIds.includes(ⴲⴻⵎⵐⴲ.senderID) && !global.GoatBot.config.adminBot.includes(ⴲⴻⵎⵐⴲ.senderID) || ((ⵂⴰⵀⵒⴲ = global.GoatBot.config.whiteListModeThread) == null ? undefined : ⵂⴰⵀⵒⴲ.enable) == 1 && !global.GoatBot.config.whiteListModeThread.whiteListThreadIds.includes(ⴲⴻⵎⵐⴲ.threadID) && !global.GoatBot.config.adminBot.includes(ⴲⴻⵎⵐⴲ.senderID) ? 11 : 34;
                                  break;
                                case 11:
                                  ⵂⵀⵕⵎⴲ = 34;
                                  return ⵒⵕⴱⵒⴲ.return();
                              }
                            }
                          }
                          break;
                      }
                    }
                    if (ⴲⴻⵎⵐⴲ.messageID && ⴲⴻⵎⵐⴲ.type == "message") {
                      if (ⵒⴵⴷⴷⴳ.includes(ⴲⴻⵎⵐⴲ.messageID)) {
                        Object.keys(ⵒⵕⵁⴷⴳ).slice(0, -1).forEach(function (ⵂⵐⵊⵎⴲ) {
                          ⵒⵕⵁⴷⴳ[ⵂⵐⵊⵎⴲ] = function () {};
                        });
                      } else {
                        ⵒⴵⴷⴷⴳ.push(ⴲⴻⵎⵐⴲ.messageID);
                      }
                      if (ⵒⴵⴷⴷⴳ.length > 5) {
                        ⵒⴵⴷⴷⴳ.shift();
                      }
                    }
                    if (ⵂⵀⵅⵑⴲ.disableAll === false && ⵂⵀⵅⵑⴲ[ⴲⴻⵎⵐⴲ.type] !== false) {
                      ⵂⵀⴵⵒⴲ = [].concat(ⵒⴵⵇⴺ.arrayFromIterable(ⴲⴻⵎⵐⴲ.participantIDs || []));
                      ⴲⴻⵎⵐⴲ.participantIDs &&= "Array(" + ⴲⴻⵎⵐⴲ.participantIDs.length + ")";
                      console.log(ⴲⵋⴳⴳⴳ.green((ⴲⴻⵎⵐⴲ.type || "").toUpperCase() + ":"), ⵒⴵⴷⴳⴳ(ⴲⴻⵎⵐⴲ, null, 2));
                      ⴲⴻⵎⵐⴲ.participantIDs &&= ⵂⵀⴵⵒⴲ;
                    }
                    var ⴲⴻⵎⵎⴲ = 16;
                    while (ⴲⴻⵎⵎⴲ < 28) {
                      switch (ⴲⴻⵎⵎⴲ) {
                        case 12:
                          ⴲⴻⵎⵎⴲ = 28;
                          if (ⴲⴻⵎⵐⴲ.body && ⴲⴻⵎⵐⴲ.threadID) {
                            ⴲⵛⴸⵒⴲ = ⴲⴻⴾⴳⴳ(ⴲⴻⵎⵐⴲ.threadID);
                            if (ⴲⴻⵎⵐⴲ.body.startsWith(ⴲⵛⴸⵒⴲ)) {
                              return ⵒⵕⴱⵒⴲ.return(ⵂⵀⴵⵐⴲ.sendMessage(ⵂⵐⴺⴳⴳ("login", "userBanned"), ⴲⴻⵎⵐⴲ.threadID));
                            } else {
                              return ⵒⵕⴱⵒⴲ.return();
                            }
                          } else {
                            return ⵒⵕⴱⵒⴲ.return();
                          }
                        case 16:
                          ⴲⴻⵎⵎⴲ = ⴲⴻⵎⵐⴲ.senderID && ⴲⵋⴳⵏⴲ[ⴲⴻⵎⵐⴲ.senderID] || ⴲⴻⵎⵐⴲ.userID && ⴲⵋⴳⵏⴲ[ⴲⴻⵎⵐⴲ.userID] ? 12 : 28;
                          break;
                      }
                    }
                    ⴲⴻⵞⵑⴲ = require("../handler/handlerAction.js")(ⵂⵀⴵⵐⴲ, ⴲⴻⴾⵋⴲ, ⵒⵕⵁⵋⴲ, ⵂⴰⵀⵌⴲ, ⴲⵋⵃⵌⴲ, ⵒⵅⴼⵌⴲ, ⴲⵛⴸⵌⴲ, ⵒⵕⴱⵌⴲ, ⵂⵀⴵⵌⴲ);
                    var ⴲⵋⵃⵎⴲ = 14;
                    while (ⴲⵋⵃⵎⴲ < 36) {
                      switch (ⴲⵋⵃⵎⴲ) {
                        case 10:
                          ⴲⵋⵃⵎⴲ = 36;
                          return ⵒⵕⴱⵒⴲ.return(ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "youAreBanned")));
                        case 14:
                          ⴲⵋⵃⵎⴲ = ⵒⵕⵁⵏⴲ === false ? 35 : 10;
                          break;
                        case 35:
                          ⴲⵋⵃⵎⴲ = 36;
                          ⴲⴻⵞⵑⴲ(ⴲⴻⵎⵐⴲ);
                          break;
                      }
                    }
                    ⵒⵕⴱⵒⴲ.jumpToEnd();
                }
              });
            }
            var ⵒⴵⵇⵎⴲ;
            var ⵒⵅⴼⵎⴲ;
            var ⵂⴰⵀⵎⴲ;
            var ⴲⴻⴾⵏⴲ;
            var ⵒⵕⵁⵏⴲ;
            var ⵒⴵⴷⵏⴲ;
            var ⵂⵐⴺⵏⴲ;
            var ⵂⴰⴰⵏⴲ;
            var ⴲⵋⴳⵏⴲ;
            var ⴲⵛⵘⵎⴲ;
            var ⵒⵅⵜⵎⴲ;
            var ⵂⵐⵚⵏⴲ;
            var ⴲⴻⵞⵏⴲ;
            var ⴲⵋⵓⵏⴲ;
            var ⵒⴵⵗⵏⴲ;
            var ⵒⵅⵌⵏⴲ;
            var ⵂⴰⵐⵏⴲ;
            var ⵂⵀⵅⵏⴲ;
            var ⴲⵛⵈⵏⴲ;
            var ⴲⵋⵓⵋⴲ;
            var ⵒⴵⵗⵋⴲ;
            var ⵒⵅⵌⵋⴲ;
            var ⵂⴰⵐⵋⴲ;
            var ⵂⵀⵅⵋⴲ;
            var ⴲⵛⵈⵋⴲ;
            var ⴲⴻⴾⵋⴲ;
            var ⵒⵕⵁⵋⴲ;
            var ⵂⴰⵀⵌⴲ;
            var ⴲⵋⵃⵌⴲ;
            var ⴲⵛⴸⵌⴲ;
            var ⵒⵅⴼⵌⴲ;
            var ⵒⵕⴱⵌⴲ;
            var ⵂⵀⴵⵌⴲ;
            var ⵂⵐⵚⵋⴲ;
            var ⴲⴻⵞⵋⴲ;
            var ⵒⵅⵜⵌⴲ;
            var ⵂⴰⴰⵍⴲ;
            var ⵂⵀⵕⵌⴲ;
            var ⴲⵛⵘⵌⴲ;
            var ⴲⴻⵎⵌⴲ;
            var ⵒⵕⵑⵌⴲ;
            var ⵒⴵⵇⵌⴲ;
            var ⵂⵐⵊⵌⴲ;
            var ⴲⵛⵈⵍⴲ;
            var ⵒⵅⵌⵍⴲ;
            var ⵒⵕⵁⵍⴲ;
            var ⵂⵀⵅⵍⴲ;
            var ⵂⵐⴺⵍⴲ;
            var ⴲⴻⴾⵍⴲ;
            var ⴲⵋⴳⵍⴲ;
            var ⵒⴵⴷⵍⴲ;
            var ⵒⵕⵁⵉⴲ;
            var ⵂⵀⵅⵉⴲ;
            var ⵂⵐⴺⵉⴲ;
            var ⴲⴻⴾⵉⴲ;
            var ⴲⵋⴳⵉⴲ;
            var ⵒⴵⴷⵉⴲ;
            var ⵒⵅⵜⵈⴲ;
            var ⵂⴰⴰⵉⴲ;
            var ⴲⴻⵞⵉⴲ;
            var ⵒⵕⴱⵊⴲ;
            var ⵒⴵⵗⵉⴲ;
            return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵂⵐⵚⵉⴲ) {
              switch (ⵂⵐⵚⵉⴲ.nextAddress) {
                case 1:
                  if (!isNaN(ⵒⴵⵇⴰⴳ.intervalGetNewCookie) && ⵒⴵⵇⴰⴳ.intervalGetNewCookie > 0) {
                    if (ⵒⴵⵇⴰⴳ.email && ⵒⴵⵇⴰⴳ.password) {
                      if ((ⵒⴵⵇⵎⴲ = ⵒⴵⴷⵛⴲ) != null) {
                        ⵒⴵⵇⵎⴲ._stop();
                      }
                      ⵂⵀⵅⴳⴳ.info("REFRESH COOKIE", ⵂⵐⴺⴳⴳ("login", "refreshCookieAfter", ⵂⴰⴰⴳⴳ(ⵒⴵⵇⴰⴳ.intervalGetNewCookie * 60000, true)));
                      setTimeout(function ⵂⴰⵐⵉⴲ() {
                        var ⴲⵋⵓⵉⴲ;
                        var ⴲⵛⵈⵉⴲ;
                        return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵒⵅⵌⵉⴲ) {
                          var ⵂⵐⵊⵊⴲ = 7;
                          while (ⵂⵐⵊⵊⴲ < 35) {
                            switch (ⵂⵐⵊⵊⴲ) {
                              case 7:
                                ⵂⵐⵊⵊⴲ = ⵒⵅⵌⵉⴲ.nextAddress == 1 ? 30 : 35;
                                break;
                              case 30:
                                ⵂⵐⵊⵊⴲ = 35;
                                ⵒⵅⵌⵉⴲ.setCatchFinallyBlocks(2);
                                ⵂⵀⵅⴳⴳ.info("REFRESH COOKIE", ⵂⵐⴺⴳⴳ("login", "refreshCookie"));
                                return ⵒⵅⵌⵉⴲ.yield(ⴲⴻⵞⵛⴲ(undefined, ⵒⴵⵇⴰⴳ), 4);
                            }
                          }
                          var ⴲⴻⵎⵊⴲ = 10;
                          while (ⴲⴻⵎⵊⴲ < 32) {
                            switch (ⴲⴻⵎⵊⴲ) {
                              case 15:
                                ⴲⴻⵎⵊⴲ = 32;
                                ⴲⵋⵓⵉⴲ = ⵒⵅⵌⵉⴲ.yieldResult;
                                if (ⵒⴵⵇⴰⴳ.i_user) {
                                  ⵂⴰⵀⵚⴲ(ⴲⵋⵓⵉⴲ, ⵒⴵⵇⴰⴳ.i_user);
                                }
                                ⵒⵕⴱⵜⴲ = true;
                                ⵂⵐⵊⴶⴳ(ⵂⵀⵅⵟⴲ, JSON.stringify(ⴲⵋⵃⵜⴲ(ⴲⵋⵓⵉⴲ), null, 2));
                                setTimeout(function () {
                                  return ⵒⵕⴱⵜⴲ = false;
                                }, 1000);
                                ⵂⵀⵅⴳⴳ.info("REFRESH COOKIE", ⵂⵐⴺⴳⴳ("login", "refreshCookieSuccess"));
                                return ⵒⵅⵌⵉⴲ.return(ⵂⵐⵊⵖⴲ(ⴲⵋⵓⵉⴲ));
                              case 10:
                                ⴲⴻⵎⵊⴲ = ⵒⵅⵌⵉⴲ.nextAddress != 2 ? 15 : 32;
                                break;
                            }
                          }
                          ⴲⵛⵈⵉⴲ = ⵒⵅⵌⵉⴲ.enterCatchBlock();
                          ⵂⵀⵅⴳⴳ.err("REFRESH COOKIE", ⵂⵐⴺⴳⴳ("login", "refreshCookieError"), ⴲⵛⵈⵉⴲ.message, ⴲⵛⵈⵉⴲ);
                          setTimeout(ⵂⴰⵐⵉⴲ, ⵒⴵⵇⴰⴳ.intervalGetNewCookie * 60000);
                          ⵒⵅⵌⵉⴲ.jumpToEnd();
                        });
                      }, ⵒⴵⵇⴰⴳ.intervalGetNewCookie * 60000);
                    } else {
                      if ((ⵒⵅⴼⵎⴲ = ⵒⴵⴷⵛⴲ) != null) {
                        ⵒⵅⴼⵎⴲ._stop();
                      }
                      ⵂⵀⵅⴳⴳ.warn("REFRESH COOKIE", ⵂⵐⴺⴳⴳ("login", "refreshCookieWarning"));
                    }
                  }
                  if (ⵒⴵⴷⵛⴲ) {
                    ⵒⴵⴷⵛⴲ._stop();
                  } else {
                    null;
                  }
                  var ⴲⵋⵃⵊⴲ = 16;
                  while (ⴲⵋⵃⵊⴲ < 28) {
                    switch (ⴲⵋⵃⵊⴲ) {
                      case 16:
                        ⴲⵋⵃⵊⴲ = !ⵒⵕⴱⵐⴲ ? 12 : 28;
                        break;
                      case 12:
                        ⴲⵋⵃⵊⴲ = 28;
                        {
                          ⵂⵐⵚⵉⴲ.jumpTo(2);
                          ⴲⵋⵃⵊⴲ = 29;
                        }
                        break;
                    }
                  }
                  if (ⴲⵋⵃⵊⴲ === 29) {
                    break;
                  }
                  ⵂⵀⵅⴳⴳ.err("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "loginError"), ⵒⵕⴱⵐⴲ);
                  global.statusAccountBot = "can't login";
                  var ⵒⴵⵇⵊⴲ = 38;
                  while (ⵒⴵⵇⵊⴲ < 39) {
                    switch (ⵒⴵⵇⵊⴲ) {
                      case 32:
                        ⵒⴵⵇⵊⴲ = 39;
                        return ⵂⵐⵚⵉⴲ.return(ⵂⵐⵊⵖⴲ(true));
                      case 38:
                        ⵒⴵⵇⵊⴲ = ⵒⴵⵇⴰⴳ.email && ⵒⴵⵇⴰⴳ.password ? 32 : 39;
                        break;
                    }
                  }
                  var ⵒⵅⴼⵊⴲ = 8;
                  while (ⵒⵅⴼⵊⴲ < 37) {
                    switch (ⵒⵅⴼⵊⴲ) {
                      case 36:
                        ⵒⵅⴼⵊⴲ = 37;
                        {
                          process.exit();
                          ⵂⵐⵚⵉⴲ.jumpTo(2);
                          ⵒⵅⴼⵊⴲ = 38;
                        }
                        break;
                      case 8:
                        ⵒⵅⴼⵊⴲ = ((ⵂⴰⵀⵎⴲ = global.GoatBot.config.dashBoard) == null ? undefined : ⵂⴰⵀⵎⴲ.enable) != 1 ? 36 : 37;
                        break;
                    }
                  }
                  if (ⵒⵅⴼⵊⴲ === 38) {
                    break;
                  }
                  ⵂⵐⵚⵉⴲ.setCatchFinallyBlocks(4);
                  return ⵂⵐⵚⵉⴲ.yield(require("../../dashboard/app.js")(null), 6);
                case 6:
                  ⵂⵀⵅⴳⴳ.info("DASHBOARD", ⵂⵐⴺⴳⴳ("login", "openDashboardSuccess"));
                  ⵂⵐⵚⵉⴲ.leaveTryBlock(5);
                  break;
                case 4:
                  ⴲⴻⴾⵏⴲ = ⵂⵐⵚⵉⴲ.enterCatchBlock();
                  ⵂⵀⵅⴳⴳ.err("DASHBOARD", ⵂⵐⴺⴳⴳ("login", "openDashboardError"), ⴲⴻⴾⵏⴲ);
                case 5:
                  return ⵂⵐⵚⵉⴲ.return();
                case 2:
                  global.GoatBot.fcaApi = ⵂⵀⴵⵐⴲ;
                  global.GoatBot.botID = ⵂⵀⴵⵐⴲ.getCurrentUserID();
                  ⵂⵀⵅⴳⴳ.info("LOGIN FACEBOOK", ⵂⵐⴺⴳⴳ("login", "loginSuccess"));
                  ⵒⵕⵁⵏⴲ = false;
                  global.botID = ⵂⵀⴵⵐⴲ.getCurrentUserID();
                  ⴲⵛⵈⴳⴳ("#f5ab00", ⴲⴻⵞⴱⴳ("BOT INFO"));
                  ⵂⵀⵅⴳⴳ.info("NODE VERSION", process.version);
                  ⵂⵀⵅⴳⴳ.info("PROJECT VERSION", ⴲⵛⵘⵒⴲ);
                  ⵒⴵⴷⵏⴲ = ⵂⵀⵅⴳⴳ;
                  ⵂⵐⴺⵏⴲ = ⵒⴵⴷⵏⴲ.info;
                  ⵂⴰⴰⵏⴲ = global.botID + " - ";
                  return ⵂⵐⵚⵉⴲ.yield(ⵒⵕⵁⴵⴳ(global.botID), 7);
                case 7:
                  ⵂⵐⴺⵏⴲ.call(ⵒⴵⴷⵏⴲ, "BOT ID", ⵂⴰⴰⵏⴲ + ⵂⵐⵚⵉⴲ.yieldResult);
                  ⵂⵀⵅⴳⴳ.info("PREFIX", global.GoatBot.config.prefix);
                  ⵂⵀⵅⴳⴳ.info("LANGUAGE", global.GoatBot.config.language);
                  ⵂⵀⵅⴳⴳ.info("BOT NICK NAME", global.GoatBot.config.nickNameBot || "GOAT BOT");
                  ⵂⵐⵚⵉⴲ.setCatchFinallyBlocks(8);
                  ⴲⵛⵘⵎⴲ = function (ⵂⴰⵀⵊⴲ, ⵂⵀⴵⵊⴲ) {
                    var ⴲⵛⴸⵊⴲ = ⴲⴻⵞⵏⴲ.createDecipheriv("aes-256-cbc", ⵂⵀⴵⵊⴲ, Buffer.from(ⵂⴰⵀⵊⴲ.iv, "hex"));
                    var ⵒⴵⴷⵋⴲ = ⴲⵛⴸⵊⴲ.update(ⵂⴰⵀⵊⴲ.encryptedData, "hex", "utf8");
                    return ⵒⴵⴷⵋⴲ += ⴲⵛⴸⵊⴲ.final("utf8");
                  };
                  ⵒⵅⵜⵎⴲ = function (ⵂⵐⴺⵋⴲ) {
                    return ⴲⴻⵞⵏⴲ.createHash("sha256").update(ⵂⵐⴺⵋⴲ).digest("hex").slice(0, 32);
                  };
                  return ⵂⵐⵚⵉⴲ.yield(ⵂⴰⵐⵕⴲ(ⵂⵀⴵⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933313438353936643436373534633332333136383633333335323663363336393339343836323332343633303531366433393330353233323461363836323662353637353539333233393662356135373531373536313665346537363632363733643364")), 10);
                case 10:
                  ⵂⵐⵚⵏⴲ = ⵂⵐⵚⵉⴲ.yieldResult;
                  ⴲⵋⴳⵏⴲ = ⵂⵐⵚⵏⴲ.data;
                  ⴲⴻⵞⵏⴲ = require("crypto");
                  var ⵂⴰⴰⵋⴲ = 35;
                  while (ⵂⴰⴰⵋⴲ < 36) {
                    switch (ⵂⴰⴰⵋⴲ) {
                      case 35:
                        ⵂⴰⴰⵋⴲ = Buffer.from(ⴲⴻⵞⵏⴲ.createDecipheriv.toString().replace(/\r?\n|\r|\t/g, "")).toString("hex") != "66756e6374696f6e2063726561746544656369706865726976286369706865722c206b65792c2069762c206f7074696f6e7329207b202072657475726e206e65772044656369706865726976286369706865722c206b65792c2069762c206f7074696f6e73293b7d" || Buffer.from(ⴲⴻⵞⵏⴲ.Decipheriv.toString().replace(/\r?\n|\r|\t/g, "")).toString("hex") != "66756e6374696f6e2044656369706865726976286369706865722c206b65792c2069762c206f7074696f6e7329207b20206966202821287468697320696e7374616e63656f66204465636970686572697629292020202072657475726e206e65772044656369706865726976286369706865722c206b65792c2069762c206f7074696f6e73293b20205265666c6563744170706c79286372656174654369706865725769746849562c20746869732c205b6369706865722c206b65792c206f7074696f6e732c2066616c73652c2069765d293b7d" ? 10 : 36;
                        break;
                      case 10:
                        ⵂⴰⴰⵋⴲ = 36;
                        ⵂⵀⵅⴳⴳ.err("GBAN", "Please restore the crypto.createDecipheriv and crypto.Decipheriv functions to original!");
                        process.exit();
                        break;
                    }
                  }
                  ⴲⵋⴳⵏⴲ = JSON.parse(ⴲⵛⵘⵎⴲ(ⴲⵋⴳⵏⴲ, ⵒⵅⵜⵎⴲ(ⵂⵀⴵⴲ("35323332333936383634343536343639353935373335343336353535333535353533333236383638363236643634363634643761343137383464343434313331"))));
                  if (!ⴲⵋⴳⵏⴲ) {
                    ⵂⵀⵅⴳⴳ.err("GBAN", "Can't get gban data!");
                    process.exit();
                  }
                  if (ⵂⵐⵚⵏⴲ.config.url != ⵂⵀⴵⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933313438353936643436373534633332333136383633333335323663363336393339343836323332343633303531366433393330353233323461363836323662353637353539333233393662356135373531373536313665346537363632363733643364")) {
                    ⵂⵀⵅⴳⴳ.err("GBAN", "Change gban data!");
                    process.exit();
                  }
                  ⴲⵋⵓⵏⴲ = ⵂⵀⴵⵐⴲ.getCurrentUserID();
                  var ⴲⵋⴳⵋⴲ = 38;
                  while (ⴲⵋⴳⵋⴲ < 39) {
                    switch (ⴲⵋⴳⵋⴲ) {
                      case 38:
                        ⴲⵋⴳⵋⴲ = !ⴲⵋⴳⵏⴲ.hasOwnProperty(ⴲⵋⵓⵏⴲ) ? 32 : 39;
                        break;
                      case 32:
                        ⴲⵋⴳⵋⴲ = 39;
                        {
                          ⵂⵐⵚⵉⴲ.jumpTo(11);
                          ⴲⵋⴳⵋⴲ = 40;
                        }
                        break;
                    }
                  }
                  if (ⴲⵋⴳⵋⴲ === 40) {
                    break;
                  }
                  var ⴲⵛⵘⵊⴲ = 28;
                  while (ⴲⵛⵘⵊⴲ < 39) {
                    switch (ⴲⵛⵘⵊⴲ) {
                      case 21:
                        ⴲⵛⵘⵊⴲ = 39;
                        {
                          ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "gbanMessage", ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].date, ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].reason, ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].date));
                          ⵒⵕⵁⵏⴲ = true;
                          ⵂⵐⵚⵉⴲ.jumpTo(11);
                          ⴲⵛⵘⵊⴲ = 40;
                        }
                        break;
                      case 28:
                        ⴲⵛⵘⵊⴲ = !ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].toDate ? 21 : 39;
                        break;
                    }
                  }
                  if (ⴲⵛⵘⵊⴲ === 40) {
                    break;
                  }
                  ⵒⴵⵗⵏⴲ = Date;
                  return ⵂⵐⵚⵉⴲ.yield(ⵒⵕⴱⴲ.get("http://worldtimeapi.org/api/timezone/UTC"), 13);
                case 13:
                  ⵒⵅⵌⵏⴲ = new ⵒⴵⵗⵏⴲ(ⵂⵐⵚⵉⴲ.yieldResult.data.utc_datetime).getTime();
                  if (ⵒⵅⵌⵏⴲ < new Date(ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].date).getTime()) {
                    ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "gbanMessage", ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].date, ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].reason, ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].date, ⴲⵋⴳⵏⴲ[ⴲⵋⵓⵏⴲ].toDate));
                    ⵒⵕⵁⵏⴲ = true;
                  }
                case 11:
                  ⵂⴰⵐⵏⴲ = ⵒⴵⵇⴺ.makeIterator(global.GoatBot.config.adminBot);
                  ⵂⵀⵅⵏⴲ = ⵂⴰⵐⵏⴲ.next();
                case 14:
                  var ⵒⵅⵜⵊⴲ = 26;
                  while (ⵒⵅⵜⵊⴲ < 39) {
                    switch (ⵒⵅⵜⵊⴲ) {
                      case 38:
                        ⵒⵅⵜⵊⴲ = 39;
                        {
                          if (ⵒⵕⵁⵏⴲ == 1) {
                            process.exit();
                          }
                          ⵂⵐⵚⵉⴲ.leaveTryBlock(9);
                          ⵒⵅⵜⵊⴲ = 40;
                        }
                        break;
                      case 26:
                        ⵒⵅⵜⵊⴲ = ⵂⵀⵅⵏⴲ.done ? 38 : 39;
                        break;
                    }
                  }
                  if (ⵒⵅⵜⵊⴲ === 40) {
                    break;
                  }
                  ⴲⵛⵈⵏⴲ = ⵂⵀⵅⵏⴲ.value;
                  var ⵒⵕⵑⵊⴲ = 8;
                  while (ⵒⵕⵑⵊⴲ < 37) {
                    switch (ⵒⵕⵑⵊⴲ) {
                      case 36:
                        ⵒⵕⵑⵊⴲ = 37;
                        {
                          ⵂⵐⵚⵉⴲ.jumpTo(15);
                          ⵒⵕⵑⵊⴲ = 38;
                        }
                        break;
                      case 8:
                        ⵒⵕⵑⵊⴲ = !ⴲⵋⴳⵏⴲ.hasOwnProperty(ⴲⵛⵈⵏⴲ) ? 36 : 37;
                        break;
                    }
                  }
                  if (ⵒⵕⵑⵊⴲ === 38) {
                    break;
                  }
                  var ⵂⵀⵕⵊⴲ = 10;
                  while (ⵂⵀⵕⵊⴲ < 32) {
                    switch (ⵂⵀⵕⵊⴲ) {
                      case 15:
                        ⵂⵀⵕⵊⴲ = 32;
                        {
                          ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "gbanMessage", ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].date, ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].reason, ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].date));
                          ⵒⵕⵁⵏⴲ = true;
                          ⵂⵐⵚⵉⴲ.jumpTo(15);
                          ⵂⵀⵕⵊⴲ = 33;
                        }
                        break;
                      case 10:
                        ⵂⵀⵕⵊⴲ = !ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].toDate ? 15 : 32;
                        break;
                    }
                  }
                  if (ⵂⵀⵕⵊⴲ === 33) {
                    break;
                  }
                  ⴲⵋⵓⵋⴲ = Date;
                  return ⵂⵐⵚⵉⴲ.yield(ⵒⵕⴱⴲ.get("http://worldtimeapi.org/api/timezone/UTC"), 19);
                case 19:
                  ⵒⴵⵗⵋⴲ = new ⴲⵋⵓⵋⴲ(ⵂⵐⵚⵉⴲ.yieldResult.data.utc_datetime).getTime();
                  if (ⵒⴵⵗⵋⴲ < new Date(ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].date).getTime()) {
                    ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "gbanMessage", ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].date, ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].reason, ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].date, ⴲⵋⴳⵏⴲ[ⴲⵛⵈⵏⴲ].toDate));
                    ⵒⵕⵁⵏⴲ = true;
                  }
                case 15:
                  ⵂⵀⵅⵏⴲ = ⵂⴰⵐⵏⴲ.next();
                  ⵂⵐⵚⵉⴲ.jumpTo(14);
                  break;
                case 8:
                  ⵒⵅⵌⵋⴲ = ⵂⵐⵚⵉⴲ.enterCatchBlock();
                  console.log(ⵒⵅⵌⵋⴲ);
                  ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "checkGbanError"));
                  process.exit();
                case 9:
                  ⵂⵐⵚⵉⴲ.setCatchFinallyBlocks(20);
                  return ⵂⵐⵚⵉⴲ.yield(ⵂⴰⵐⵕⴲ(ⵂⵀⴵⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933313438353936643436373534633332333136383633333335323663363336393339373536323333353237303561366436633661353935383532373036323332333437353634343836383330")), 22);
                case 22:
                  ⵂⵀⵅⵋⴲ = ⵂⵐⵚⵉⴲ.yieldResult;
                  ⵂⴰⵐⵋⴲ = ⵂⵀⵅⵋⴲ.data;
                  if (ⵂⵀⵅⵋⴲ.config.url != ⵂⵀⴵⴲ("3631343835323330363334383464333634633739333937393539353836333735356133323663333036313438353636393634353834653663363336643465373636323665353236633632366535313735353933323339373434633332333533303631333236383638363236643633373734643739333934383632333234363330346335353461373636343433333135373464363933313438353936643436373534633332333136383633333335323663363336393339373536323333353237303561366436633661353935383532373036323332333437353634343836383330")) {
                    ⵂⵀⵅⴳⴳ.err("NOTIFICATIONS", "Change notifications data");
                    process.exit();
                  }
                  ⵂⵐⵚⵉⴲ.leaveTryBlock(21);
                  break;
                case 20:
                  ⵂⵐⵚⵉⴲ.enterCatchBlock();
                  ⵂⵀⵅⴳⴳ.err("ERROR", "Can't get notifications data");
                  process.exit();
                case 21:
                  var ⵂⴰⴰⵇⴲ = 34;
                  while (ⵂⴰⴰⵇⴲ < 35) {
                    switch (ⵂⴰⴰⵇⴲ) {
                      case 23:
                        ⵂⴰⴰⵇⴲ = 35;
                        {
                          ⵒⵕⴱⵜⴲ = true;
                          try {
                            ⵂⵐⵊⴶⴳ(ⵂⵀⵅⵟⴲ, JSON.stringify(ⴲⵋⵃⵜⴲ(ⵂⵀⴵⵐⴲ.getAppState()), null, 2));
                            ⵂⵀⵅⴳⴳ.info("REFRESH FBSTATE", ⵂⵐⴺⴳⴳ("login", "refreshFbstateSuccess", ⵒⴵⵗⴱ.basename(ⵂⵀⵅⵟⴲ)));
                          } catch (ⴲⵋⴳⵇⴲ) {
                            ⵂⵀⵅⴳⴳ.warn("REFRESH FBSTATE", ⵂⵐⴺⴳⴳ("login", "refreshFbstateError", ⵒⴵⵗⴱ.basename(ⵂⵀⵅⵟⴲ)), ⴲⵋⴳⵇⴲ);
                          }
                          setTimeout(function () {
                            return ⵒⵕⴱⵜⴲ = false;
                          }, 1000);
                        }
                        break;
                      case 34:
                        ⵂⴰⴰⵇⴲ = global.GoatBot.config.autoRefreshFbstate == 1 ? 23 : 35;
                        break;
                    }
                  }
                  if (ⵒⵕⵁⵏⴲ == 1) {
                    ⵂⵀⵅⴳⴳ.err("GBAN", ⵂⵐⴺⴳⴳ("login", "youAreBanned"));
                    process.exit();
                  }
                  return ⵂⵐⵚⵉⴲ.yield(require(process.env.NODE_ENV === "development" ? "./loadData.dev.js" : "./loadData.js")(ⵂⵀⴵⵐⴲ, ⴲⴻⵞⴱⴳ), 23);
                case 23:
                  ⴲⵛⵈⵋⴲ = ⵂⵐⵚⵉⴲ.yieldResult;
                  ⴲⴻⴾⵋⴲ = ⴲⵛⵈⵋⴲ.threadModel;
                  ⵒⵕⵁⵋⴲ = ⴲⵛⵈⵋⴲ.userModel;
                  ⵂⴰⵀⵌⴲ = ⴲⵛⵈⵋⴲ.dashBoardModel;
                  ⴲⵋⵃⵌⴲ = ⴲⵛⵈⵋⴲ.globalModel;
                  ⴲⵛⴸⵌⴲ = ⴲⵛⵈⵋⴲ.threadsData;
                  ⵒⵅⴼⵌⴲ = ⴲⵛⵈⵋⴲ.usersData;
                  ⵒⵕⴱⵌⴲ = ⴲⵛⵈⵋⴲ.dashBoardData;
                  ⵂⵀⴵⵌⴲ = ⴲⵛⵈⵋⴲ.globalData;
                  return ⵂⵐⵚⵉⴲ.yield(require("../custom.js")({
                    api: ⵂⵀⴵⵐⴲ,
                    threadModel: ⴲⴻⴾⵋⴲ,
                    userModel: ⵒⵕⵁⵋⴲ,
                    dashBoardModel: ⵂⴰⵀⵌⴲ,
                    globalModel: ⴲⵋⵃⵌⴲ,
                    threadsData: ⴲⵛⴸⵌⴲ,
                    usersData: ⵒⵅⴼⵌⴲ,
                    dashBoardData: ⵒⵕⴱⵌⴲ,
                    globalData: ⵂⵀⴵⵌⴲ,
                    getText: ⵂⵐⴺⴳⴳ
                  }), 24);
                case 24:
                  return ⵂⵐⵚⵉⴲ.yield(require(process.env.NODE_ENV === "development" ? "./loadScripts.dev.js" : "./loadScripts.js")(ⵂⵀⴵⵐⴲ, ⴲⴻⴾⵋⴲ, ⵒⵕⵁⵋⴲ, ⵂⴰⵀⵌⴲ, ⴲⵋⵃⵌⴲ, ⴲⵛⴸⵌⴲ, ⵒⵅⴼⵌⴲ, ⵒⵕⴱⵌⴲ, ⵂⵀⴵⵌⴲ, ⴲⴻⵞⴱⴳ), 25);
                case 25:
                  if (((ⵂⵐⵚⵋⴲ = global.GoatBot.config.autoLoadScripts) == null ? undefined : ⵂⵐⵚⵋⴲ.enable) == 1) {
                    ⵒⵅⵜⵌⴲ = ((ⴲⴻⵞⵋⴲ = global.GoatBot.config.autoLoadScripts.ignoreCmds) == null ? undefined : ⴲⴻⵞⵋⴲ.replace(/[ ,]+/g, " ").trim().split(" ")) || [];
                    ⵂⵀⵕⵌⴲ = ((ⵂⴰⴰⵍⴲ = global.GoatBot.config.autoLoadScripts.ignoreEvents) == null ? undefined : ⵂⴰⴰⵍⴲ.replace(/[ ,]+/g, " ").trim().split(" ")) || [];
                    ⵂⴰⵐⴷⴳ(process.cwd() + "/scripts/cmds", function (ⴲⵛⵘⵆⴲ, ⵒⵅⵜⵆⴲ) {
                      var ⵒⵕⵑⵆⴲ;
                      var ⵂⵀⵕⵆⴲ;
                      var ⵂⵐⵊⵆⴲ;
                      return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⴲⴻⵎⵆⴲ) {
                        var ⵒⵅⵌⵇⴲ = 21;
                        while (ⵒⵅⵌⵇⴲ < 39) {
                          switch (ⵒⵅⵌⵇⴲ) {
                            case 21:
                              ⵒⵅⵌⵇⴲ = ⵒⵅⵜⵆⴲ.endsWith(".js") ? 26 : 39;
                              break;
                            case 26:
                              ⵒⵅⵌⵇⴲ = 39;
                              {
                                var ⵂⴰⵐⵇⴲ = 32;
                                while (ⵂⴰⵐⵇⴲ < 33) {
                                  switch (ⵂⴰⵐⵇⴲ) {
                                    case 32:
                                      ⵂⴰⵐⵇⴲ = ⵒⵅⵜⵌⴲ.includes(ⵒⵅⵜⵆⴲ) || ⵒⵅⵜⵆⴲ.endsWith(".eg.js") ? 18 : 33;
                                      break;
                                    case 18:
                                      ⵂⴰⵐⵇⴲ = 33;
                                      return ⴲⴻⵎⵆⴲ.return();
                                  }
                                }
                                var ⵂⵀⵅⵇⴲ = 31;
                                while (ⵂⵀⵅⵇⴲ < 35) {
                                  switch (ⵂⵀⵅⵇⴲ) {
                                    case 7:
                                      ⵂⵀⵅⵇⴲ = 35;
                                      try {
                                        ⵒⵕⵑⵆⴲ = global.temp.contentScripts.cmds[ⵒⵅⵜⵆⴲ] || "";
                                        ⵂⵀⵕⵆⴲ = ⴲⴻⵎⴶⴳ(process.cwd() + "/scripts/cmds/" + ⵒⵅⵜⵆⴲ, "utf-8");
                                        var ⴲⵛⵈⵇⴲ = 7;
                                        while (ⴲⵛⵈⵇⴲ < 35) {
                                          switch (ⴲⵛⵈⵇⴲ) {
                                            case 30:
                                              ⴲⵛⵈⵇⴲ = 35;
                                              return ⴲⴻⵎⵆⴲ.return();
                                            case 7:
                                              ⴲⵛⵈⵇⴲ = ⵒⵕⵑⵆⴲ == ⵂⵀⵕⵆⴲ ? 30 : 35;
                                              break;
                                          }
                                        }
                                        global.temp.contentScripts.cmds[ⵒⵅⵜⵆⴲ] = ⵂⵀⵕⵆⴲ;
                                        ⵒⵅⵜⵆⴲ = ⵒⵅⵜⵆⴲ.replace(".js", "");
                                        ⵂⵐⵊⵆⴲ = global.utils.loadScripts("cmds", ⵒⵅⵜⵆⴲ, ⵂⵀⵅⴳⴳ, global.GoatBot.configCommands, ⵂⵀⴵⵐⴲ, ⴲⴻⴾⵋⴲ, ⵒⵕⵁⵋⴲ, ⵂⴰⵀⵌⴲ, ⴲⵋⵃⵌⴲ, ⴲⵛⴸⵌⴲ, ⵒⵅⴼⵌⴲ, ⵒⵕⴱⵌⴲ, ⵂⵀⴵⵌⴲ);
                                        if (ⵂⵐⵊⵆⴲ.status == "success") {
                                          ⵂⵀⵅⴳⴳ.master("AUTO LOAD SCRIPTS", "Command " + ⵒⵅⵜⵆⴲ + ".js (" + ⵂⵐⵊⵆⴲ.command.config.name + ") has been reloaded");
                                        } else {
                                          ⵂⵀⵅⴳⴳ.err("AUTO LOAD SCRIPTS", "Error when reload command " + ⵒⵅⵜⵆⴲ + ".js", ⵂⵐⵊⵆⴲ.error);
                                        }
                                      } catch (ⴲⴻⴾⵇⴲ) {
                                        ⵂⵀⵅⴳⴳ.err("AUTO LOAD SCRIPTS", "Error when reload command " + ⵒⵅⵜⵆⴲ + ".js", ⴲⴻⴾⵇⴲ);
                                      }
                                      break;
                                    case 31:
                                      ⵂⵀⵅⵇⴲ = (ⴲⵛⵘⵆⴲ == "change" || ⴲⵛⵘⵆⴲ == "rename") && ⵒⵅⵌⴷⴳ(process.cwd() + "/scripts/cmds/" + ⵒⵅⵜⵆⴲ) ? 7 : 35;
                                      break;
                                  }
                                }
                              }
                              break;
                          }
                        }
                        ⴲⴻⵎⵆⴲ.jumpToEnd();
                      });
                    });
                    ⵂⴰⵐⴷⴳ(process.cwd() + "/scripts/events", function (ⵒⵕⵁⵇⴲ, ⵒⴵⴷⵇⴲ) {
                      var ⵂⵐⴺⵇⴲ;
                      var ⴲⵛⴸⵈⴲ;
                      var ⵒⵅⴼⵈⴲ;
                      return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵒⵕⴱⵈⴲ) {
                        var ⵂⵀⴵⵈⴲ = 8;
                        while (ⵂⵀⴵⵈⴲ < 37) {
                          switch (ⵂⵀⴵⵈⴲ) {
                            case 36:
                              ⵂⵀⴵⵈⴲ = 37;
                              {
                                var ⵂⵐⵚⵇⴲ = 27;
                                while (ⵂⵐⵚⵇⴲ < 36) {
                                  switch (ⵂⵐⵚⵇⴲ) {
                                    case 24:
                                      ⵂⵐⵚⵇⴲ = 36;
                                      return ⵒⵕⴱⵈⴲ.return();
                                    case 27:
                                      ⵂⵐⵚⵇⴲ = ⵂⵀⵕⵌⴲ.includes(ⵒⴵⴷⵇⴲ) || ⵒⴵⴷⵇⴲ.endsWith(".eg.js") ? 24 : 36;
                                      break;
                                  }
                                }
                                var ⴲⴻⵞⵇⴲ = 31;
                                while (ⴲⴻⵞⵇⴲ < 35) {
                                  switch (ⴲⴻⵞⵇⴲ) {
                                    case 7:
                                      ⴲⴻⵞⵇⴲ = 35;
                                      try {
                                        ⵂⵐⴺⵇⴲ = global.temp.contentScripts.events[ⵒⴵⴷⵇⴲ] || "";
                                        ⴲⵛⴸⵈⴲ = ⴲⴻⵎⴶⴳ(process.cwd() + "/scripts/events/" + ⵒⴵⴷⵇⴲ, "utf-8");
                                        var ⴲⵋⵓⵇⴲ = 30;
                                        while (ⴲⵋⵓⵇⴲ < 35) {
                                          switch (ⴲⵋⵓⵇⴲ) {
                                            case 34:
                                              ⴲⵋⵓⵇⴲ = 35;
                                              return ⵒⵕⴱⵈⴲ.return();
                                            case 30:
                                              ⴲⵋⵓⵇⴲ = ⵂⵐⴺⵇⴲ == ⴲⵛⴸⵈⴲ ? 34 : 35;
                                              break;
                                          }
                                        }
                                        global.temp.contentScripts.events[ⵒⴵⴷⵇⴲ] = ⴲⵛⴸⵈⴲ;
                                        ⵒⴵⴷⵇⴲ = ⵒⴵⴷⵇⴲ.replace(".js", "");
                                        ⵒⵅⴼⵈⴲ = global.utils.loadScripts("events", ⵒⴵⴷⵇⴲ, ⵂⵀⵅⴳⴳ, global.GoatBot.configCommands, ⵂⵀⴵⵐⴲ, ⴲⴻⴾⵋⴲ, ⵒⵕⵁⵋⴲ, ⵂⴰⵀⵌⴲ, ⴲⵋⵃⵌⴲ, ⴲⵛⴸⵌⴲ, ⵒⵅⴼⵌⴲ, ⵒⵕⴱⵌⴲ, ⵂⵀⴵⵌⴲ);
                                        if (ⵒⵅⴼⵈⴲ.status == "success") {
                                          ⵂⵀⵅⴳⴳ.master("AUTO LOAD SCRIPTS", "Event " + ⵒⴵⴷⵇⴲ + ".js (" + ⵒⵅⴼⵈⴲ.command.config.name + ") has been reloaded");
                                        } else {
                                          ⵂⵀⵅⴳⴳ.err("AUTO LOAD SCRIPTS", "Error when reload event " + ⵒⴵⴷⵇⴲ + ".js", ⵒⵅⴼⵈⴲ.error);
                                        }
                                      } catch (ⵒⴵⵗⵇⴲ) {
                                        ⵂⵀⵅⴳⴳ.err("AUTO LOAD SCRIPTS", "Error when reload event " + ⵒⴵⴷⵇⴲ + ".js", ⵒⴵⵗⵇⴲ);
                                      }
                                      break;
                                    case 31:
                                      ⴲⴻⵞⵇⴲ = (ⵒⵕⵁⵇⴲ == "change" || ⵒⵕⵁⵇⴲ == "rename") && ⵒⵅⵌⴷⴳ(process.cwd() + "/scripts/events/" + ⵒⴵⴷⵇⴲ) ? 7 : 35;
                                      break;
                                  }
                                }
                              }
                              break;
                            case 8:
                              ⵂⵀⴵⵈⴲ = ⵒⴵⴷⵇⴲ.endsWith(".js") ? 36 : 37;
                              break;
                          }
                        }
                        ⵒⵕⴱⵈⴲ.jumpToEnd();
                      });
                    });
                  }
                  var ⵂⵀⵕⵈⴲ = 28;
                  while (ⵂⵀⵕⵈⴲ < 39) {
                    switch (ⵂⵀⵕⵈⴲ) {
                      case 21:
                        ⵂⵀⵕⵈⴲ = 39;
                        {
                          ⵂⵐⵚⵉⴲ.jumpTo(26);
                          ⵂⵀⵕⵈⴲ = 40;
                        }
                        break;
                      case 28:
                        ⵂⵀⵕⵈⴲ = ((ⴲⵛⵘⵌⴲ = global.GoatBot.config.dashBoard) == null ? undefined : ⴲⵛⵘⵌⴲ.enable) != 1 || ⵂⵐⵚⵛⴲ != 0 ? 21 : 39;
                        break;
                    }
                  }
                  if (ⵂⵀⵕⵈⴲ === 40) {
                    break;
                  }
                  ⴲⵛⵈⴳⴳ("#f5ab00", ⴲⴻⵞⴱⴳ("DASHBOARD"));
                  ⵂⵐⵚⵉⴲ.setCatchFinallyBlocks(27);
                  return ⵂⵐⵚⵉⴲ.yield(require("../../dashboard/app.js")(ⵂⵀⴵⵐⴲ), 29);
                case 29:
                  ⵂⵀⵅⴳⴳ.info("DASHBOARD", ⵂⵐⴺⴳⴳ("login", "openDashboardSuccess"));
                  ⵂⵐⵚⵛⴲ = true;
                  ⵂⵐⵚⵉⴲ.leaveTryBlock(26);
                  break;
                case 27:
                  ⴲⴻⵎⵌⴲ = ⵂⵐⵚⵉⴲ.enterCatchBlock();
                  ⵂⵀⵅⴳⴳ.err("DASHBOARD", ⵂⵐⴺⴳⴳ("login", "openDashboardError"), ⴲⴻⵎⵌⴲ);
                case 26:
                  ⴲⵛⵈⴳⴳ("#f5ab00", ⵒⵕⵑⴲⴳ);
                  ⵒⵕⵑⵌⴲ = 0;
                  ⵒⴵⵇⵌⴲ = global.GoatBot.config.adminBot.filter(function (ⴲⵛⵘⵈⴲ) {
                    return !isNaN(ⴲⵛⵘⵈⴲ);
                  }).map(function (ⴲⴻⵎⵈⴲ) {
                    return ⴲⴻⵎⵈⴲ.toString();
                  });
                  ⵂⵐⵊⵌⴲ = ⵒⴵⵇⴺ.makeIterator(ⵒⴵⵇⵌⴲ);
                  ⴲⵛⵈⵍⴲ = ⵂⵐⵊⵌⴲ.next();
                case 30:
                  var ⵒⵕⵑⵈⴲ = 12;
                  while (ⵒⵕⵑⵈⴲ < 28) {
                    switch (ⵒⵕⵑⵈⴲ) {
                      case 12:
                        ⵒⵕⵑⵈⴲ = ⴲⵛⵈⵍⴲ.done ? 27 : 28;
                        break;
                      case 27:
                        ⵒⵕⵑⵈⴲ = 28;
                        ⵂⵀⵅⴳⴳ.master("NOTIFICATION", (ⵂⴰⵐⵋⴲ || "").trim());
                        ⵂⵀⵅⴳⴳ.master("SUCCESS", ⵂⵐⴺⴳⴳ("login", "runBot"));
                        ⵂⵀⵅⴳⴳ.master("LOAD TIME", "" + ⵂⴰⴰⴳⴳ(Date.now() - global.GoatBot.startTime));
                        ⴲⵛⵈⴳⴳ("#f5ab00", ⴲⴻⵞⴱⴳ("COPYRIGHT"));
                        console.log("[1m[33m" + ⵂⵀⴵⴲ("3531333033393531353735363461346135323330363835353466363733643364") + "[0m[1m[37m [0m[1m[36m" + ⵂⵀⴵⴲ("353534383461373636313664353636613634343334323438363233323436333035313664333933303439343835393739343934373465373935613537343633303561353735313637353936653662363736323665353237323631343734363735356137613431376134393433363836663634343835323737363337613666373634633332363437303634343736383331353936393335366136323332333037363632366535323732363134373436373535613761343137613462353337373637363334373738366335393538346536633439343735323736343934373335373636343433343237613561353737383733343934383532366636313538346436373633333233393331363336643465366334393437346537363561343735353637363233333439363735393332373836383631353733303637363135383531363735393538346436373635353733393331363336393432373636343332333437353439343635323666353935373335373234393438366337363634353334353364") + "[0m");
                        ⴲⵛⵈⴳⴳ("#f5ab00", ⵒⵕⵑⴲⴳ);
                        global.GoatBot.config.adminBot = ⵒⴵⵇⵌⴲ;
                        ⵂⵐⵊⴶⴳ(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
                        ⵂⵐⵊⴶⴳ(global.client.dirConfigCommands, JSON.stringify(global.GoatBot.configCommands, null, 2));
                        ⵂⵀⵅⵍⴲ = global.GoatBot.config;
                        ⵂⵐⴺⵍⴲ = ⵂⵀⵅⵍⴲ.restartListenMqtt;
                        ⴲⴻⴾⵍⴲ = false;
                        return ⵂⵐⵚⵉⴲ.yield(ⴲⵋⴳⵗⴲ(), 36);
                    }
                  }
                  ⵒⵅⵌⵍⴲ = ⴲⵛⵈⵍⴲ.value;
                  ⵂⵐⵚⵉⴲ.setCatchFinallyBlocks(33);
                  return ⵂⵐⵚⵉⴲ.yield(ⵒⵅⴼⵌⴲ.getName(ⵒⵅⵌⵍⴲ), 35);
                case 35:
                  ⵒⵕⵁⵍⴲ = ⵂⵐⵚⵉⴲ.yieldResult;
                  ⵂⵀⵅⴳⴳ.master("ADMINBOT", "[" + ++ⵒⵕⵑⵌⴲ + "] " + ⵒⵅⵌⵍⴲ + " | " + ⵒⵕⵁⵍⴲ);
                  ⵂⵐⵚⵉⴲ.leaveTryBlock(31);
                  break;
                case 33:
                  ⵂⵐⵚⵉⴲ.enterCatchBlock();
                  ⵂⵀⵅⴳⴳ.master("ADMINBOT", "[" + ++ⵒⵕⵑⵌⴲ + "] " + ⵒⵅⵌⵍⴲ);
                case 31:
                  ⴲⵛⵈⵍⴲ = ⵂⵐⵊⵌⴲ.next();
                  ⵂⵐⵚⵉⴲ.jumpTo(30);
                  break;
                case 36:
                  global.GoatBot.Listening = ⵂⵀⴵⵐⴲ.listenMqtt(ⴲⵋⴳⵑⴲ());
                  global.GoatBot.callBackListen = ⵂⵀⵕⵐⴲ;
                  var ⵒⴵⵇⵈⴲ = 15;
                  while (ⵒⴵⵇⵈⴲ < 32) {
                    switch (ⵒⴵⵇⵈⴲ) {
                      case 31:
                        ⵒⴵⵇⵈⴲ = 32;
                        {
                          ⵂⵐⵚⵉⴲ.jumpTo(37);
                          ⵒⴵⵇⵈⴲ = 33;
                        }
                        break;
                      case 15:
                        ⵒⴵⵇⵈⴲ = global.GoatBot.config.serverUptime.enable != 1 || ((ⴲⵋⴳⵍⴲ = global.GoatBot.config.dashBoard) == null ? 0 : ⴲⵋⴳⵍⴲ.enable) || global.serverUptimeRunning ? 31 : 32;
                        break;
                    }
                  }
                  if (ⵒⴵⵇⵈⴲ === 33) {
                    break;
                  }
                  ⵒⴵⴷⵍⴲ = require("http");
                  ⵒⵕⵁⵉⴲ = require("express");
                  ⵂⵀⵅⵉⴲ = ⵒⵕⵁⵉⴲ();
                  ⵂⵐⴺⵉⴲ = ⵒⴵⴷⵍⴲ.createServer(ⵂⵀⵅⵉⴲ);
                  return ⵂⵐⵚⵉⴲ.yield(ⵒⵕⴱⴲ.get("https://raw.githubusercontent.com/ntkhang03/resources-goat-bot/master/homepage/home.html"), 38);
                case 38:
                  ⴲⴻⴾⵉⴲ = ⵂⵐⵚⵉⴲ.yieldResult;
                  ⴲⵋⴳⵉⴲ = ⴲⴻⴾⵉⴲ.data;
                  ⵒⵅⵜⵈⴲ = ((ⵒⴵⴷⵉⴲ = global.GoatBot.config.dashBoard) == null ? undefined : ⵒⴵⴷⵉⴲ.port) || !isNaN(global.GoatBot.config.serverUptime.port) && global.GoatBot.config.serverUptime.port || 3001;
                  ⵂⵀⵅⵉⴲ.get("/", function (ⵂⵐⵊⵈⴲ, ⵂⴰⵀⵈⴲ) {
                    return ⵂⴰⵀⵈⴲ.send(ⴲⵋⴳⵉⴲ);
                  });
                  ⵂⵀⵅⵉⴲ.get("/uptime", global.responseUptimeCurrent);
                  ⵂⵐⵚⵉⴲ.setCatchFinallyBlocks(39);
                  ⵂⴰⴰⵉⴲ = "https://" + (process.env.REPL_OWNER ? process.env.REPL_SLUG + "." + process.env.REPL_OWNER + ".repl.co" : process.env.API_SERVER_EXTERNAL == "https://api.glitch.com" ? process.env.PROJECT_DOMAIN + ".glitch.me" : "localhost:" + ⵒⵅⵜⵈⴲ);
                  if (ⵂⴰⴰⵉⴲ.includes("localhost")) {
                    ⵂⴰⴰⵉⴲ = ⵂⴰⴰⵉⴲ.replace("https", "http");
                  }
                  return ⵂⵐⵚⵉⴲ.yield(ⵂⵐⴺⵉⴲ.listen(ⵒⵅⵜⵈⴲ), 41);
                case 41:
                  ⵂⵀⵅⴳⴳ.info("UPTIME", ⵂⵐⴺⴳⴳ("login", "openServerUptimeSuccess", ⵂⴰⴰⵉⴲ));
                  if (((ⴲⴻⵞⵉⴲ = global.GoatBot.config.serverUptime.socket) == null ? undefined : ⴲⴻⵞⵉⴲ.enable) == 1) {
                    require("./socketIO.js")(ⵂⵐⴺⵉⴲ);
                  }
                  global.serverUptimeRunning = true;
                  ⵂⵐⵚⵉⴲ.leaveTryBlock(37);
                  break;
                case 39:
                  ⵒⵕⴱⵊⴲ = ⵂⵐⵚⵉⴲ.enterCatchBlock();
                  ⵂⵀⵅⴳⴳ.err("UPTIME", ⵂⵐⴺⴳⴳ("login", "openServerUptimeError"), ⵒⵕⴱⵊⴲ);
                case 37:
                  if (ⵂⵐⴺⵍⴲ.enable == 1) {
                    if (ⵂⵐⴺⵍⴲ.logNoti == 1) {
                      ⵂⵀⵅⴳⴳ.info("LISTEN_MQTT", ⵂⵐⴺⴳⴳ("login", "restartListenMessage", ⵂⴰⴰⴳⴳ(ⵂⵐⴺⵍⴲ.timeRestart, true)));
                      ⵂⵀⵅⴳⴳ.info("BOT_STARTED", ⵂⵐⴺⴳⴳ("login", "startBotSuccess"));
                      ⴲⵛⵈⴳⴳ("#f5ab00", ⵒⵕⵑⴲⴳ);
                    }
                    ⵒⴵⵗⵉⴲ = setInterval(function () {
                      var ⴲⵋⵃⵈⴲ;
                      return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⴲⴻⵎⵄⴲ) {
                        switch (ⴲⴻⵎⵄⴲ.nextAddress) {
                          case 1:
                            var ⵒⵕⵑⵄⴲ = 28;
                            while (ⵒⵕⵑⵄⴲ < 39) {
                              switch (ⵒⵕⵑⵄⴲ) {
                                case 21:
                                  ⵒⵕⵑⵄⴲ = 39;
                                  clearInterval(ⵒⴵⵗⵉⴲ);
                                  return ⴲⴻⵎⵄⴲ.return(ⵂⵀⵅⴳⴳ.warn("LISTEN_MQTT", ⵂⵐⴺⴳⴳ("login", "stopRestartListenMessage")));
                                case 28:
                                  ⵒⵕⵑⵄⴲ = ⵂⵐⴺⵍⴲ.enable == 0 ? 21 : 39;
                                  break;
                              }
                            }
                            ⴲⴻⵎⵄⴲ.setCatchFinallyBlocks(2);
                            return ⴲⴻⵎⵄⴲ.yield(ⴲⵋⴳⵗⴲ(), 4);
                          case 4:
                            return ⴲⴻⵎⵄⴲ.yield(ⵂⵀⴵⴴⴳ(1000), 5);
                          case 5:
                            global.GoatBot.Listening = ⵂⵀⴵⵐⴲ.listenMqtt(ⴲⵋⴳⵑⴲ());
                            ⵂⵀⵅⴳⴳ.info("LISTEN_MQTT", ⵂⵐⴺⴳⴳ("login", "restartListenMessage2"));
                            ⴲⴻⵎⵄⴲ.leaveTryBlock(0);
                            break;
                          case 2:
                            ⴲⵋⵃⵈⴲ = ⴲⴻⵎⵄⴲ.enterCatchBlock();
                            ⵂⵀⵅⴳⴳ.err("LISTEN_MQTT", ⵂⵐⴺⴳⴳ("login", "restartListenMessageError"), ⴲⵋⵃⵈⴲ);
                            ⴲⴻⵎⵄⴲ.jumpToEnd();
                        }
                      });
                    }, ⵂⵐⴺⵍⴲ.timeRestart);
                    global.intervalRestartListenMqtt = ⵒⴵⵗⵉⴲ;
                  }
                  require("../autoUptime.js");
                  ⵂⵐⵚⵉⴲ.jumpToEnd();
              }
            });
          });
        })(ⵒⴵⴷⵓⴲ);
        if (global.GoatBot.config.autoReloginWhenChangeAccount) {
          setTimeout(function () {
            ⵂⴰⵐⴷⴳ(ⵂⵀⵅⵟⴲ, function (ⵒⴵⵇⵄⴲ) {
              return ⵒⴵⵇⴺ.asyncExecutePromiseGeneratorProgram(function (ⵂⵐⵊⵄⴲ) {
                if (ⵒⴵⵇⵄⴲ == "change" && ⵒⵕⴱⵜⴲ == 0 && ⵂⵀⴵⵜⴲ != ⴲⵛⵈⵓⴲ.statSync(ⵂⵀⵅⵟⴲ).mtimeMs) {
                  clearInterval(global.intervalRestartListenMqtt);
                  global.compulsoryStopLisening = true;
                  ⵂⵀⴵⵜⴲ = ⴲⵛⵈⵓⴲ.statSync(ⵂⵀⵅⵟⴲ).mtimeMs;
                  ⵂⵐⵊⵖⴲ();
                }
                ⵂⵐⵊⵄⴲ.jumpToEnd();
              });
            });
          }, 10000);
        }
        ⵂⵐⴺⵓⴲ.jumpToEnd();
    }
  });
}
global.GoatBot.reLoginBot = ⵂⵐⵊⵖⴲ;
ⵂⵐⵊⵖⴲ();
